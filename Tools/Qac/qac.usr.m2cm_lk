* qac.usr.m2cm
*
* copyright:  (c) 2009 - Programming Research
*
* Purpose:  M2CM-2.6-QAC-7.2 configuration user message file
*
* History:  Auto-created from Database on 26-Oct-09
* PLUS LK ADDON Messages for HIS scope metric check
*
* changed MISRA rule reference numbering: e.g. 2.1; => 02.01
*
*
* CMS version: 0.1a
*
#levelname                         0
#levelname                         2     Minor
#levelname                         3     Major
#levelname                         4     M2CM
#levelname                         5     LK
#levelname                         6     Portability
#levelname                         7     Undefined Behaviour
#levelname                         8     Language Constraints
#levelname                         9     Errors
#define    ANT_information         0     Annotations
#define    CMA_information         0     CMA information
#define    Parser_Rec              0     Recovery
#define    submsg                  0     Sub-Messages
#define    Min_Array               2     Arrays, structures, unions & bit-fields
#define    Min_Brace               2     Bracing and Indentation
#define    Min_Cpp                 2     C++ compatibility
#define    CMA_declaration         2     CMA declaration checks
#define    CMA_maintenance         2     CMA maintenance checks
#define    Min_Const               2     Constants
#define    Min_Ctrl                2     Control flow
#define    Min_Decl                2     Declarations and Definitions
#define    Min_Enum                2     Enumerations
#define    Min_Func                2     Functions
#define    Min_Ident               2     Identifiers
#define    Min_Prom                2     Integral promotion
#define    Min_KandR               2     K&R compatibility
#define    Metrics                 2     Metric thresholds
#define    Obsolete                2     Obsolete
#define    Min_Ops                 2     Operations
#define    Min_Prepro              2     Preprocessor
#define    Min_Stmt                2     Statements
#define    Min_Switch              2     Switch statements
#define    Maj_Decl                3     Declarations and definitions
#define    Maj_Enum                3     Enumerations
#define    Maj_Func                3     Functions
#define    Maj_FLtoI               3     Implicit conversions - float to integer
#define    Maj_ItoFL               3     Implicit conversions - integer to float
#define    Maj_Small               3     Implicit conversions - narrowing
#define    Maj_Pchar               3     Implicit conversions - plain char
#define    Maj_StoUS               3     Implicit conversions - signed to unsigned
#define    Maj_UStoLS              3     Implicit conversions - unsigned to larger signed
#define    Maj_UStoS               3     Implicit conversions - unsigned to signed
#define    Maj_Ops                 3     Operations
#define    Maj_Prepro              3     Preprocessor
#define    Maj_Redun               3     Redundancy
#define    Maj_Stmt                3     Statements
#define    local                   4     Local Standards
#define	   LKCM	                   5     LKCM configuration
#define	   LK_METRICS              5     LK HIS Metrics evaluation
#define    ISO_C90_Limits          6     ISO C90 Conformance limits
#define    ISO_C99_Limits          6     ISO C99 Conformance limits
#define    ISO_ImplDef             6     Implementation defined
#define    Lang_ext                6     Language extensions
#define    C99_ext                 6     ISO C99 Language features
#define    CMA_warning             7     CMA undefined
#define    ISO_ExpU                7     Explicitly undefined
#define    ISO_ImpU                7     Implicitly undefined
#define    Constraint              8     Constraint violations
#define    Config                  9     QAC configuration
#define    Syntax                  9     Syntax errors
#define    RULE001_1               4     M2CM Rule 1.1
#define    RULE001_2               4     M2CM Rule 1.2
#define    RULE001_3               4     M2CM Rule 1.3
#define    RULE001_4               4     M2CM Rule 1.4
#define    RULE001_5               4     M2CM Rule 1.5
#define    RULE002_1               4     M2CM Rule 2.1
#define    RULE002_2               4     M2CM Rule 2.2
#define    RULE002_3               4     M2CM Rule 2.3
#define    RULE002_4               4     M2CM Rule 2.4
#define    RULE003_1               4     M2CM Rule 3.1
#define    RULE003_2               4     M2CM Rule 3.2
#define    RULE003_3               4     M2CM Rule 3.3
#define    RULE003_4               4     M2CM Rule 3.4
#define    RULE003_5               4     M2CM Rule 3.5
#define    RULE003_6               4     M2CM Rule 3.6
#define    RULE004_1               4     M2CM Rule 4.1
#define    RULE004_2               4     M2CM Rule 4.2
#define    RULE005_1               4     M2CM Rule 5.1
#define    RULE005_2               4     M2CM Rule 5.2
#define    RULE005_3               4     M2CM Rule 5.3
#define    RULE005_4               4     M2CM Rule 5.4
#define    RULE005_5               4     M2CM Rule 5.5
#define    RULE005_6               4     M2CM Rule 5.6
#define    RULE005_7               4     M2CM Rule 5.7
#define    RULE006_1               4     M2CM Rule 6.1
#define    RULE006_2               4     M2CM Rule 6.2
#define    RULE006_3               4     M2CM Rule 6.3
#define    RULE006_4               4     M2CM Rule 6.4
#define    RULE006_5               4     M2CM Rule 6.5
#define    RULE007_1               4     M2CM Rule 7.1
#define    RULE008_1               4     M2CM Rule 8.1
#define    RULE008_2               4     M2CM Rule 8.2
#define    RULE008_3               4     M2CM Rule 8.3
#define    RULE008_4               4     M2CM Rule 8.4
#define    RULE008_5               4     M2CM Rule 8.5
#define    RULE008_6               4     M2CM Rule 8.6
#define    RULE008_7               4     M2CM Rule 8.7
#define    RULE008_8               4     M2CM Rule 8.8
#define    RULE008_9               4     M2CM Rule 8.9
#define    RULE08_10               4     M2CM Rule 8.10
#define    RULE08_11               4     M2CM Rule 8.11
#define    RULE08_12               4     M2CM Rule 8.12
#define    RULE009_1               4     M2CM Rule 9.1
#define    RULE009_2               4     M2CM Rule 9.2
#define    RULE009_3               4     M2CM Rule 9.3
#define    RULE010_1               4     M2CM Rule 10.1
#define    RULE010_2               4     M2CM Rule 10.2
#define    RULE010_3               4     M2CM Rule 10.3
#define    RULE010_4               4     M2CM Rule 10.4
#define    RULE010_5               4     M2CM Rule 10.5
#define    RULE010_6               4     M2CM Rule 10.6
#define    RULE011_1               4     M2CM Rule 11.1
#define    RULE011_2               4     M2CM Rule 11.2
#define    RULE011_3               4     M2CM Rule 11.3
#define    RULE011_4               4     M2CM Rule 11.4
#define    RULE011_5               4     M2CM Rule 11.5
#define    RULE012_1               4     M2CM Rule 12.1
#define    RULE012_2               4     M2CM Rule 12.2
#define    RULE012_3               4     M2CM Rule 12.3
#define    RULE012_4               4     M2CM Rule 12.4
#define    RULE012_5               4     M2CM Rule 12.5
#define    RULE012_6               4     M2CM Rule 12.6
#define    RULE012_7               4     M2CM Rule 12.7
#define    RULE012_8               4     M2CM Rule 12.8
#define    RULE012_9               4     M2CM Rule 12.9
#define    RULE12_10               4     M2CM Rule 12.10
#define    RULE12_11               4     M2CM Rule 12.11
#define    RULE12_12               4     M2CM Rule 12.12
#define    RULE12_13               4     M2CM Rule 12.13
#define    RULE013_1               4     M2CM Rule 13.1
#define    RULE013_2               4     M2CM Rule 13.2
#define    RULE013_3               4     M2CM Rule 13.3
#define    RULE013_4               4     M2CM Rule 13.4
#define    RULE013_5               4     M2CM Rule 13.5
#define    RULE013_6               4     M2CM Rule 13.6
#define    RULE013_7               4     M2CM Rule 13.7
#define    RULE014_1               4     M2CM Rule 14.1
#define    RULE014_2               4     M2CM Rule 14.2
#define    RULE014_3               4     M2CM Rule 14.3
#define    RULE014_4               4     M2CM Rule 14.4
#define    RULE014_5               4     M2CM Rule 14.5
#define    RULE014_6               4     M2CM Rule 14.6
#define    RULE014_7               4     M2CM Rule 14.7
#define    RULE014_8               4     M2CM Rule 14.8
#define    RULE014_9               4     M2CM Rule 14.9
#define    RULE14_10               4     M2CM Rule 14.10
#define    RULE015_0               4     M2CM Rule 15.0
#define    RULE015_1               4     M2CM Rule 15.1
#define    RULE015_2               4     M2CM Rule 15.2
#define    RULE015_3               4     M2CM Rule 15.3
#define    RULE015_4               4     M2CM Rule 15.4
#define    RULE015_5               4     M2CM Rule 15.5
#define    RULE016_1               4     M2CM Rule 16.1
#define    RULE016_2               4     M2CM Rule 16.2
#define    RULE016_3               4     M2CM Rule 16.3
#define    RULE016_4               4     M2CM Rule 16.4
#define    RULE016_5               4     M2CM Rule 16.5
#define    RULE016_6               4     M2CM Rule 16.6
#define    RULE016_7               4     M2CM Rule 16.7
#define    RULE016_8               4     M2CM Rule 16.8
#define    RULE016_9               4     M2CM Rule 16.9
#define    RULE16_10               4     M2CM Rule 16.10
#define    RULE017_1               4     M2CM Rule 17.1
#define    RULE017_2               4     M2CM Rule 17.2
#define    RULE017_3               4     M2CM Rule 17.3
#define    RULE017_4               4     M2CM Rule 17.4
#define    RULE017_5               4     M2CM Rule 17.5
#define    RULE017_6               4     M2CM Rule 17.6
#define    RULE018_1               4     M2CM Rule 18.1
#define    RULE018_2               4     M2CM Rule 18.2
#define    RULE018_3               4     M2CM Rule 18.3
#define    RULE018_4               4     M2CM Rule 18.4
#define    RULE019_1               4     M2CM Rule 19.1
#define    RULE019_2               4     M2CM Rule 19.2
#define    RULE019_3               4     M2CM Rule 19.3
#define    RULE019_4               4     M2CM Rule 19.4
#define    RULE019_5               4     M2CM Rule 19.5
#define    RULE019_6               4     M2CM Rule 19.6
#define    RULE019_7               4     M2CM Rule 19.7
#define    RULE019_8               4     M2CM Rule 19.8
#define    RULE019_9               4     M2CM Rule 19.9
#define    RULE19_10               4     M2CM Rule 19.10
#define    RULE19_11               4     M2CM Rule 19.11
#define    RULE19_12               4     M2CM Rule 19.12
#define    RULE19_13               4     M2CM Rule 19.13
#define    RULE19_14               4     M2CM Rule 19.14
#define    RULE19_15               4     M2CM Rule 19.15
#define    RULE19_16               4     M2CM Rule 19.16
#define    RULE19_17               4     M2CM Rule 19.17
#define    RULE020_1               4     M2CM Rule 20.1
#define    RULE020_2               4     M2CM Rule 20.2
#define    RULE020_3               4     M2CM Rule 20.3
#define    RULE020_4               4     M2CM Rule 20.4
#define    RULE020_5               4     M2CM Rule 20.5
#define    RULE020_6               4     M2CM Rule 20.6
#define    RULE020_7               4     M2CM Rule 20.7
#define    RULE020_8               4     M2CM Rule 20.8
#define    RULE020_9               4     M2CM Rule 20.9
#define    RULE20_10               4     M2CM Rule 20.10
#define    RULE20_11               4     M2CM Rule 20.11
#define    RULE20_12               4     M2CM Rule 20.12
#define    RULE021_1               4     M2CM Rule 21.1

****************************************************************************************************************
* 			        LEOPOLD KOSTAL GUIDELINE MESSAGE-GROUPS	   		             	       *
****************************************************************************************************************
#define    RULE6111                5     LKCM Rule 0.0
#define    RULE6112                5     LKCM Rule 7.2
#define    RULE6113                5     LKCM Rule 0.0
#define    RULE6200                5     LKCM Rule 5.4
#define    RULE6201                5     LKCM Rule 5.4
#define    RULE6202                5     LKCM Rule 5.4
#define    RULE6203                5     LKCM Rule 5.4
#define    RULE6204                5     LKCM Rule 5.4
#define    RULE6205                5     LKCM Rule 5.4
#define    RULE6300                5     LKCM Rule 5.5
#define    RULE6301                5     LKCM Rule 5.5
#define    RULE6310                5     LKCM Rule 5.5
#define    RULE6400                5     LKCM Rule 5.6
#define    RULE6405                5     LKCM Rule 5.6
#define    RULE6500                5     LKCM Rule 5.7
#define    RULE6501                5     LKCM Rule 5.7
#define    RULE6502                5     LKCM Rule 5.7
#define    RULE6503                5     LKCM Rule 5.7
#define    RULE6504                5     LKCM Rule 5.7
#define    RULE6505                5     LKCM Rule 5.7
#define    RULE6506                5     LKCM Rule 5.7
#define    RULE6507                5     LKCM Rule 5.7
#define    RULE6508                5     LKCM Rule 5.7
#define    RULE6509                5     LKCM Rule 5.7
#define    RULE6510                5     LKCM Rule 5.7
#define    RULE6511                5     LKCM Rule 5.7
#define    RULE6512                5     LKCM Rule 5.7
#define    RULE6513                5     LKCM Rule 5.7
#define    RULE6514                5     LKCM Rule 5.7
#define    RULE6515                5     LKCM Rule 5.7
#define    RULE6516                5     LKCM Rule 5.7
#define    RULE6517                5     LKCM Rule 5.7
#define    RULE6518                5     LKCM Rule 5.7
#define    RULE6519                5     LKCM Rule 5.7
#define    RULE6550                5     LKCM Rule 5.7
#define    RULE6551                5     LKCM Rule 5.7
#define    RULE6552                5     LKCM Rule 5.7
#define    RULE6553                5     LKCM Rule 5.7
#define    RULE6554                5     LKCM Rule 5.7
#define    RULE6555                5     LKCM Rule 5.7
#define    RULE6556                5     LKCM Rule 5.7
#define    RULE6557                5     LKCM Rule 5.7
#define    RULE6558                5     LKCM Rule 5.7
#define    RULE6559                5     LKCM Rule 5.7
#define    RULE6600                5     LKCM Rule 6.1
#define    RULE6601                5     LKCM Rule 6.1
#define    RULE6602                5     LKCM Rule 6.1
#define    RULE6603                5     LKCM Rule 6.1
#define    RULE6605                5     LKCM Rule 5.7
#define    RULE6720                5     LKCM Rule 7.2

****** MISRA org *************


160    RULE001_2             [U] Using unsupported conversion specifier number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
160    ISO_ExpU              [U] Using unsupported conversion specifier number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

161    RULE001_2             [U] Unknown length modifier used with 'i' or 'd' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
161    ISO_ExpU              [U] Unknown length modifier used with 'i' or 'd' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

162    RULE001_2             [U] Unknown length modifier used with 'o' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
162    ISO_ExpU              [U] Unknown length modifier used with 'o' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

163    RULE001_2             [U] Unknown length modifier used with 'u' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
163    ISO_ExpU              [U] Unknown length modifier used with 'u' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

164    RULE001_2             [U] Unknown length modifier used with 'x' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
164    ISO_ExpU              [U] Unknown length modifier used with 'x' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

165    RULE001_2             [U] Unknown length modifier used with 'X' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
165    ISO_ExpU              [U] Unknown length modifier used with 'X' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

166    RULE001_2             [U] Unknown length modifier used with 'f' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
166    ISO_ExpU              [U] Unknown length modifier used with 'f' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

167    RULE001_2             [U] Unknown length modifier used with 'e' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
167    ISO_ExpU              [U] Unknown length modifier used with 'e' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

168    RULE001_2             [U] Unknown length modifier used with 'E' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
168    ISO_ExpU              [U] Unknown length modifier used with 'E' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

169    RULE001_2             [U] Unknown length modifier used with 'g' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
169    ISO_ExpU              [U] Unknown length modifier used with 'g' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

170    RULE001_2             [U] Unknown length modifier used with 'G' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
170    ISO_ExpU              [U] Unknown length modifier used with 'G' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

171    RULE001_2             [U] Unknown length modifier used with 'c' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
171    ISO_ExpU              [U] Unknown length modifier used with 'c' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

172    RULE001_2             [U] Unknown length modifier used with '%%' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
172    ISO_ExpU              [U] Unknown length modifier used with '%%' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

173    RULE001_2             [U] Unknown length modifier used with 's' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
173    ISO_ExpU              [U] Unknown length modifier used with 's' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

174    RULE001_2             [U] Unknown length modifier used with 'n' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
174    ISO_ExpU              [U] Unknown length modifier used with 'n' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

175    RULE001_2             [U] Unknown length modifier used with 'p' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
175    ISO_ExpU              [U] Unknown length modifier used with 'p' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

176    RULE001_2             [U] Incomplete conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
176    ISO_ExpU              [U] Incomplete conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

177    RULE001_2             [U] Field width of format conversion specifier exceeds 509 characters.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Environmental limit
177    ISO_ExpU              [U] Field width of format conversion specifier exceeds 509 characters.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Environmental limit

178    RULE001_2             [U] Precision of format conversion specifier exceeds 509 characters.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Environmental limit
178    ISO_ExpU              [U] Precision of format conversion specifier exceeds 509 characters.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Environmental limit

179    RULE001_2             [U] Argument type does not match conversion specifier number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions
179    ISO_ExpU              [U] Argument type does not match conversion specifier number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.1 Formatted input/output functions

180    RULE001_1             [C99] Use of ll for conversion specifier.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-7.19.6 Formatted input/output functions
180    C99_ext               [C99] Use of ll for conversion specifier.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-7.19.6 Formatted input/output functions

184    RULE001_2             [U] Insufficient arguments to satisfy conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
184    ISO_ExpU              [U] Insufficient arguments to satisfy conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

185    RULE001_2             [U] Call contains more arguments than conversion specifiers.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
185    ISO_ExpU              [U] Call contains more arguments than conversion specifiers.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

186    RULE001_2             [U] A call to this function must include at least one argument.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
186    ISO_ExpU              [U] A call to this function must include at least one argument.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

190    RULE001_2             [U] Using unsupported conversion specifier number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
190    ISO_ExpU              [U] Using unsupported conversion specifier number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

191    RULE001_2             [U] Unknown length modifier used with 'd/i/n' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
191    ISO_ExpU              [U] Unknown length modifier used with 'd/i/n' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

192    RULE001_2             [U] Unknown length modifier used with 'o' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
192    ISO_ExpU              [U] Unknown length modifier used with 'o' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

193    RULE001_2             [U] Unknown length modifier used with 'u' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
193    ISO_ExpU              [U] Unknown length modifier used with 'u' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

194    RULE001_2             [U] Unknown length modifier used with 'x/X' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
194    ISO_ExpU              [U] Unknown length modifier used with 'x/X' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

195    RULE001_2             [U] Unknown length modifier used with 'e/E/f/F/g/G' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
195    ISO_ExpU              [U] Unknown length modifier used with 'e/E/f/F/g/G' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

196    RULE001_2             [U] Unknown length modifier used with 's' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
196    ISO_ExpU              [U] Unknown length modifier used with 's' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

197    RULE001_2             [U] Unknown length modifier used with 'p' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
197    ISO_ExpU              [U] Unknown length modifier used with 'p' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

198    RULE001_2             [U] Unknown length modifier used with '%%' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
198    ISO_ExpU              [U] Unknown length modifier used with '%%' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

199    RULE001_2             [U] Unknown length modifier used with '[' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
199    ISO_ExpU              [U] Unknown length modifier used with '[' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

200    RULE001_2             [U] Unknown length modifier used with 'c' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
200    ISO_ExpU              [U] Unknown length modifier used with 'c' conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

201    RULE001_2             [U] Incomplete conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
201    ISO_ExpU              [U] Incomplete conversion specifier, number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

202    RULE003_1             [I] '-' character in '[]' conversion specification is implementation defined.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
202    ISO_ImplDef           [I] '-' character in '[]' conversion specification is implementation defined.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

203    RULE001_2             [U] Value of character prior to '-' in '[]' is greater than following character.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 The fscanf Function
203    ISO_ExpU              [U] Value of character prior to '-' in '[]' is greater than following character.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 The fscanf Function

204    RULE001_2             [U] Field width of format conversion specifier exceeds 509 characters.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
204    ISO_ExpU              [U] Field width of format conversion specifier exceeds 509 characters.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

206    RULE001_2             [U] Argument type does not match conversion specifier number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
206    ISO_ExpU              [U] Argument type does not match conversion specifier number %s.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

207    RULE001_2             [U] 'scanf' expects address of objects being stored into.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9, ISO:C90-7.9.6.4 - The scanf Function
207    ISO_ExpU              [U] 'scanf' expects address of objects being stored into.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9, ISO:C90-7.9.6.4 - The scanf Function

208    RULE001_2             [U] Same character occurs in scanset more than once.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
208    ISO_ExpU              [U] Same character occurs in scanset more than once.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

235    RULE004_1             [U] Unknown escape sequence.\\
MISRA-C:2004 Rule 04.01	REFERENCE - ISO:C90-6.1.3.4 Description, ISO:C90-6.9.2 Future Language Directions
235    ISO_ExpU              [U] Unknown escape sequence.\\
MISRA-C:2004 Rule 04.01	REFERENCE - ISO:C90-6.1.3.4 Description, ISO:C90-6.9.2 Future Language Directions

240    RULE001_1             [E] This file contains the control-M character at the end of a line.\\
MISRA-C:2004 Rule 01.01
240    Lang_ext              [E] This file contains the control-M character at the end of a line.\\
MISRA-C:2004 Rule 01.01

241    RULE001_1             [E] This file contains the control-Z character - was this transferred from a PC?\\
MISRA-C:2004 Rule 01.01
241    Lang_ext              [E] This file contains the control-Z character - was this transferred from a PC?\\
MISRA-C:2004 Rule 01.01

246    RULE001_1             [E] Binary integer constants are a language extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.1.3.2 Integer Constants
246    Lang_ext              [E] Binary integer constants are a language extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.1.3.2 Integer Constants

271    RULE003_1             [U] Left shift operation on constant signed expression generating an undefined value.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators, ISO:C90-6.4, ISO:C99-6.5.7 Bitwise shift operators
271    ISO_ExpU              [U] Left shift operation on constant signed expression generating an undefined value.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators, ISO:C90-6.4, ISO:C99-6.5.7 Bitwise shift operators

272    RULE021_1             [I] Apparent conversion of integer expression to a signed integer type which cannot represent the value.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)
272    ISO_ImplDef           [I] Apparent conversion of integer expression to a signed integer type which cannot represent the value.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)

273    RULE021_1             [I] Definite conversion of integer expression to a signed integer type which cannot represent the value.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)
273    ISO_ImplDef           [I] Definite conversion of integer expression to a signed integer type which cannot represent the value.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)

274    RULE003_1             [I] Conversion of integer constant expression to a signed integer type which cannot represent the value.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)
274    ISO_ImplDef           [I] Conversion of integer constant expression to a signed integer type which cannot represent the value.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)

275    RULE001_2             [U] Floating value is out of range for conversion to destination type.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.1.3 Conversions (Floating and Integral)
275    ISO_ExpU              [U] Floating value is out of range for conversion to destination type.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.1.3 Conversions (Floating and Integral)

277    RULE003_1             Conversion of a constant negative value to an unsigned type.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.2.1.2 Conversions - Signed and Unsigned Integers
277    Maj_Ops               Conversion of a constant negative value to an unsigned type.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.2.1.2 Conversions - Signed and Unsigned Integers

284    RULE003_1             [I] Multiple character constants have implementation defined values.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.1.3.4 Character Constants - Semantics
284    ISO_ImplDef           [I] Multiple character constants have implementation defined values.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.1.3.4 Character Constants - Semantics

285    RULE003_1             [I] Character constant contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets
285    ISO_ImplDef           [I] Character constant contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets

286    RULE003_1             [I] String literal contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets
286    ISO_ImplDef           [I] String literal contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets

287    RULE003_1             [I] Header name contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets
287    ISO_ImplDef           [I] Header name contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets

288    RULE003_1             [I] Source file '%s' has comments containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets
288    ISO_ImplDef           [I] Source file '%s' has comments containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets

289    RULE003_1             [I] Source file '%s' has preprocessing tokens containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets
289    ISO_ImplDef           [I] Source file '%s' has preprocessing tokens containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets

290    RULE021_1             Definite conversion of a negative value to an unsigned type.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.2.1.2 Conversions - Signed and Unsigned Integers
290    Maj_Ops               Definite conversion of a negative value to an unsigned type.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.2.1.2 Conversions - Signed and Unsigned Integers

291    RULE021_1             Apparent conversion of a negative value to an unsigned type.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.2.1.2 Conversions - Signed and Unsigned Integers
291    Maj_Ops               Apparent conversion of a negative value to an unsigned type.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.2.1.2 Conversions - Signed and Unsigned Integers

292    RULE003_1             [I] Source file '%s' has comments containing one of the characters '$', '@' or '`'.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets
292    ISO_ImplDef           [I] Source file '%s' has comments containing one of the characters '$', '@' or '`'.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets

294    RULE003_1             [U] Definite signed left shift operation generating an undefined value.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators, ISO:C90-6.4, ISO:C99-6.5.7 Bitwise shift operators
294    ISO_ExpU              [U] Definite signed left shift operation generating an undefined value.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators, ISO:C90-6.4, ISO:C99-6.5.7 Bitwise shift operators

295    RULE003_1             [U] Apparent signed left shift operation generating an undefined value.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators, ISO:C90-6.4, ISO:C99-6.5.7 Bitwise shift operators
295    ISO_ExpU              [U] Apparent signed left shift operation generating an undefined value.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators, ISO:C90-6.4, ISO:C99-6.5.7 Bitwise shift operators

296    RULE021_1             [U] Definite overflow in signed arithmetic operation.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3 Expressions
296    ISO_ExpU              [U] Definite overflow in signed arithmetic operation.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3 Expressions

297    RULE021_1             [U] Apparent overflow in signed arithmetic operation.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3 Expressions
297    ISO_ExpU              [U] Apparent overflow in signed arithmetic operation.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3 Expressions

299    RULE003_1             [I] Source file '%s' includes #pragma directives containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets
299    ISO_ImplDef           [I] Source file '%s' includes #pragma directives containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.1 Character Sets

301    RULE011_2             [u] Cast between a pointer to object and a floating type.\\
MISRA-C:2004 Rule 11.02	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
301    ISO_ImpU              [u] Cast between a pointer to object and a floating type.\\
MISRA-C:2004 Rule 11.02	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

302    RULE011_1             [u] Cast between a pointer to function and a floating type.\\
MISRA-C:2004 Rule 11.01	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
302    ISO_ImpU              [u] Cast between a pointer to function and a floating type.\\
MISRA-C:2004 Rule 11.01	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

303    RULE011_3             [I] Cast between a pointer to volatile object and an integral type.\\
MISRA-C:2004 Rule 11.03	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
303    ISO_ImplDef           [I] Cast between a pointer to volatile object and an integral type.\\
MISRA-C:2004 Rule 11.03	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

304    RULE001_2             [U] The address of an array declared 'register' may not be computed.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.1 Storage-Class Specifiers - Semantics
304    ISO_ExpU              [U] The address of an array declared 'register' may not be computed.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.1 Storage-Class Specifiers - Semantics

305    RULE011_3             [I] Cast between a pointer to function and an integral type.\\
MISRA-C:2004 Rule 11.03	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
305    ISO_ImplDef           [I] Cast between a pointer to function and an integral type.\\
MISRA-C:2004 Rule 11.03	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

306    RULE011_3             [I] Cast between a pointer to object and an integral type.\\
MISRA-C:2004 Rule 11.03	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
306    ISO_ImplDef           [I] Cast between a pointer to object and an integral type.\\
MISRA-C:2004 Rule 11.03	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

307    RULE011_1             [u] Cast between a pointer to object and a pointer to function.\\
MISRA-C:2004 Rule 11.01	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
307    ISO_ImpU              [u] Cast between a pointer to object and a pointer to function.\\
MISRA-C:2004 Rule 11.01	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

308    RULE003_1             Non-portable cast involving pointer to an incomplete type.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
308    Min_Ops               Non-portable cast involving pointer to an incomplete type.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

309    RULE001_2             [U] Integral type is not large enough to hold a pointer value.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
309    ISO_ExpU              [U] Integral type is not large enough to hold a pointer value.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

310    RULE011_4             Casting to different object pointer type.\\
MISRA-C:2004 Rule 11.04	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
310    Min_Ops               Casting to different object pointer type.\\
MISRA-C:2004 Rule 11.04	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

311    RULE011_5             Dangerous pointer cast results in loss of const qualification.\\
MISRA-C:2004 Rule 11.05
311    Maj_Ops               Dangerous pointer cast results in loss of const qualification.\\
MISRA-C:2004 Rule 11.05

312    RULE011_5             Dangerous pointer cast results in loss of volatile qualification.\\
MISRA-C:2004 Rule 11.05
312    Maj_Ops               Dangerous pointer cast results in loss of volatile qualification.\\
MISRA-C:2004 Rule 11.05

313    RULE011_1             Casting to different function pointer type.\\
MISRA-C:2004 Rule 11.01	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics
313    Min_Ops               Casting to different function pointer type.\\
MISRA-C:2004 Rule 11.01	REFERENCE - ISO:C90-6.3.4 Cast Operators - Semantics

320    RULE001_1             [C99] Declaration within 'for' statement.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.8.5 Iteration statements
320    C99_ext               [C99] Declaration within 'for' statement.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.8.5 Iteration statements

336    RULE007_1             Macro defined as an octal constant.\\
MISRA-C:2004 Rule 07.01
336    Min_Const             Macro defined as an octal constant.\\
MISRA-C:2004 Rule 07.01

337    RULE001_2             [U] String literal has undefined value. This may be a result of using '#' on \\.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.3.2 The # Operator - Semantics
337    ISO_ExpU              [U] String literal has undefined value. This may be a result of using '#' on \\.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.3.2 The # Operator - Semantics

339    RULE007_1             Octal constant used.\\
MISRA-C:2004 Rule 07.01
339    Min_Const             Octal constant used.\\
MISRA-C:2004 Rule 07.01

341    RULE19_13             Using the stringify operator '#'.\\
MISRA-C:2004 Rule 19.13	REFERENCE - ISO:C90-6.8.3.2 The # Operator
341    Min_KandR             Using the stringify operator '#'.\\
MISRA-C:2004 Rule 19.13	REFERENCE - ISO:C90-6.8.3.2 The # Operator

342    RULE19_13             Using the glue operator '##'.\\
MISRA-C:2004 Rule 19.13	REFERENCE - ISO:C90-6.8.3.3 The ## Operator
342    Min_KandR             Using the glue operator '##'.\\
MISRA-C:2004 Rule 19.13	REFERENCE - ISO:C90-6.8.3.3 The ## Operator

400    RULE012_2             [U] '%s' is modified more than once between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.02	REFERENCE - ISO:C90-6.3 Expressions
400    ISO_ExpU              [U] '%s' is modified more than once between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.02	REFERENCE - ISO:C90-6.3 Expressions

401    RULE012_2             [U] '%s' may be modified more than once between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.02	REFERENCE - ISO:C90-6.3 Expressions
401    ISO_ExpU              [U] '%s' may be modified more than once between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.02	REFERENCE - ISO:C90-6.3 Expressions

402    RULE012_2             [U] '%s' is modified and accessed between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.02	REFERENCE - ISO:C90-6.3 Expressions
402    ISO_ExpU              [U] '%s' is modified and accessed between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.02	REFERENCE - ISO:C90-6.3 Expressions

403    RULE012_2             [U] '%s' may be modified and accessed between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.02	REFERENCE - ISO:C90-6.3 Expressions
403    ISO_ExpU              [U] '%s' may be modified and accessed between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.02	REFERENCE - ISO:C90-6.3 Expressions

410    RULE001_1             [L] Nesting of parentheses exceeds 32 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
410    ISO_C90_Limits        [L] Nesting of parentheses exceeds 32 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

422    RULE016_6             [C] Function call contains fewer arguments than prototype specifies.\\
MISRA-C:2004 Rule 16.06	REFERENCE - ISO:C90-6.3.2.2 Function calls
422    Constraint            [C] Function call contains fewer arguments than prototype specifies.\\
MISRA-C:2004 Rule 16.06	REFERENCE - ISO:C90-6.3.2.2 Function calls

423    RULE016_6             [C] Function call contains more arguments than prototype specifies.\\
MISRA-C:2004 Rule 16.06	REFERENCE - ISO:C90-6.3.2.2 Function calls
423    Constraint            [C] Function call contains more arguments than prototype specifies.\\
MISRA-C:2004 Rule 16.06	REFERENCE - ISO:C90-6.3.2.2 Function calls

475    RULE001_2             [u] Operand of 'sizeof' is an expression designating a bit-field.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.3.4 The sizeof Operator
475    ISO_ImpU              [u] Operand of 'sizeof' is an expression designating a bit-field.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.3.4 The sizeof Operator

488    RULE017_4             Performing pointer arithmetic.\\
MISRA-C:2004 Rule 17.04	REFERENCE - ISO:C90-6.3.6 Additive Operators - Constraints
488    Min_Ops               Performing pointer arithmetic.\\
MISRA-C:2004 Rule 17.04	REFERENCE - ISO:C90-6.3.6 Additive Operators - Constraints

489    RULE017_4             The integer value 1 is being added or subtracted from a pointer.\\
MISRA-C:2004 Rule 17.04	REFERENCE - ISO:C90-6.3.6 Additive Operators - Constraints
489    Min_Ops               The integer value 1 is being added or subtracted from a pointer.\\
MISRA-C:2004 Rule 17.04	REFERENCE - ISO:C90-6.3.6 Additive Operators - Constraints

491    RULE017_4             Array subscripting applied to an object of pointer type.\\
MISRA-C:2004 Rule 17.04	REFERENCE - ISO:C90-6.3.2.1 Array Subscripting, ISO:C90 6.2.2.1 Lvalues and Function Designators, ISO:C90 6.7.1 Function Definitions - Semantics
491    Min_Ops               Array subscripting applied to an object of pointer type.\\
MISRA-C:2004 Rule 17.04	REFERENCE - ISO:C90-6.3.2.1 Array Subscripting, ISO:C90 6.2.2.1 Lvalues and Function Designators, ISO:C90 6.7.1 Function Definitions - Semantics

492    RULE017_4             Array subscripting applied to a function parameter declared as a pointer.\\
MISRA-C:2004 Rule 17.04	REFERENCE - ISO:C90-6.3.2.1 Array Subscripting, ISO:C90 6.2.2.1 Lvalues and Function Designators, ISO:C90 6.7.1 Function Definitions - Semantics
492    Min_Ops               Array subscripting applied to a function parameter declared as a pointer.\\
MISRA-C:2004 Rule 17.04	REFERENCE - ISO:C90-6.3.2.1 Array Subscripting, ISO:C90 6.2.2.1 Lvalues and Function Designators, ISO:C90 6.7.1 Function Definitions - Semantics

499    RULE012_8             Right operand of shift operator is greater than or equal to the width of the underlying type.\\
MISRA-C:2004 Rule 12.08	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators - Semantics
499    Min_Ops               Right operand of shift operator is greater than or equal to the width of the underlying type.\\
MISRA-C:2004 Rule 12.08	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators - Semantics

500    RULE012_8             [U] Right operand of shift operator is negative - this is undefined.\\
MISRA-C:2004 Rule 12.08	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators - Semantics
500    ISO_ExpU              [U] Right operand of shift operator is negative - this is undefined.\\
MISRA-C:2004 Rule 12.08	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators - Semantics

501    RULE012_8             [U] Right operand of shift operator is too large - this is undefined.\\
MISRA-C:2004 Rule 12.08	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators - Semantics
501    ISO_ExpU              [U] Right operand of shift operator is too large - this is undefined.\\
MISRA-C:2004 Rule 12.08	REFERENCE - ISO:C90-6.3.7 Bitwise Shift Operators - Semantics

502    RULE012_7             A right shift on signed data may be an arithmetic or a logical shift.\\
MISRA-C:2004 Rule 12.07
502    Min_Ops               A right shift on signed data may be an arithmetic or a logical shift.\\
MISRA-C:2004 Rule 12.07

503    RULE001_2             [U] Dereference of constant NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.3.2 Address and Indirection Operators - Semantics
503    ISO_ExpU              [U] Dereference of constant NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.3.2 Address and Indirection Operators - Semantics

504    RULE001_2             [U] Definite dereference of NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.3.2 Address and Indirection Operators - Semantics
504    ISO_ExpU              [U] Definite dereference of NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.3.2 Address and Indirection Operators - Semantics

505    RULE001_2             [U] Apparent dereference of NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.3.2 Address and Indirection Operators - Semantics
505    ISO_ExpU              [U] Apparent dereference of NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.3.2 Address and Indirection Operators - Semantics

507    RULE001_2             [u] Arithmetic operation on constant NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.2.3 Pointers
507    ISO_ImpU              [u] Arithmetic operation on constant NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.2.3 Pointers

508    RULE001_2             [u] Definite arithmetic operation on NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.2.3 Pointers
508    ISO_ImpU              [u] Definite arithmetic operation on NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.2.3 Pointers

509    RULE001_2             [u] Apparent arithmetic operation on NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.2.3 Pointers
509    ISO_ImpU              [u] Apparent arithmetic operation on NULL pointer.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.2.3 Pointers

543    RULE001_2             [U] 'void' expressions have no value and may not be used in expressions.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.2.2 void
543    ISO_ExpU              [U] 'void' expressions have no value and may not be used in expressions.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.2.2.2 void

544    RULE018_1             [U] The value of an incomplete 'union' may not be used.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.2.2.1 lvalues
544    ISO_ExpU              [U] The value of an incomplete 'union' may not be used.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.2.2.1 lvalues

545    RULE018_1             [U] The value of an incomplete 'struct' may not be used.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.2.2.1 lvalues
545    ISO_ExpU              [U] The value of an incomplete 'struct' may not be used.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.2.2.1 lvalues

547    RULE005_4             [C] This declaration of tag '%s' conflicts with a previous declaration.\\
MISRA-C:2004 Rule 05.04	REFERENCE - ISO:C90-6.5 Declarations - Constraints, ISO:C90-6.5.2.3 Tags
547    Constraint            [C] This declaration of tag '%s' conflicts with a previous declaration.\\
MISRA-C:2004 Rule 05.04	REFERENCE - ISO:C90-6.5 Declarations - Constraints, ISO:C90-6.5.2.3 Tags

551    RULE001_1             [E] Cast may not operate on the left operand of the assignment operator.\\
MISRA-C:2004 Rule 01.01
551    Lang_ext              [E] Cast may not operate on the left operand of the assignment operator.\\
MISRA-C:2004 Rule 01.01

581    RULE003_1             [I] Floating-point constant may be too small to be representable.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.4.2.2 Characteristics of Floating Types
581    ISO_ImplDef           [I] Floating-point constant may be too small to be representable.\\
MISRA-C:2004 Rule 03.01	REFERENCE - ISO:C90-5.2.4.2.2 Characteristics of Floating Types

585    RULE021_1             [U] Apparent division by zero.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3.5 Multiplicative Operators - Semantics
585    ISO_ExpU              [U] Apparent division by zero.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3.5 Multiplicative Operators - Semantics

586    RULE001_2             [U] Division by constant zero.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.5 Multiplicative Operators - Semantics
586    ISO_ExpU              [U] Division by constant zero.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.5 Multiplicative Operators - Semantics

587    RULE021_1             [U] Definite division by zero.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3.5 Multiplicative Operators - Semantics
587    ISO_ExpU              [U] Definite division by zero.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3.5 Multiplicative Operators - Semantics

594    RULE014_1             Negative 'case' label expression is incompatible with unsigned controlling expression in 'switch' statement.\\
MISRA-C:2004 Rule 14.01
594    Maj_Stmt              Negative 'case' label expression is incompatible with unsigned controlling expression in 'switch' statement.\\
MISRA-C:2004 Rule 14.01

601    RULE001_1             [E] Function 'main()' is not of type 'int (void)' or 'int (int, char *[])'.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.1.2.2 Hosted environment
601    Lang_ext              [E] Function 'main()' is not of type 'int (void)' or 'int (int, char *[])'.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.1.2.2 Hosted environment

602    RULE020_2             [U] The identifier '%s' is reserved for use by the library.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.3 Reserved Identifiers
602    ISO_ExpU              [U] The identifier '%s' is reserved for use by the library.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.3 Reserved Identifiers

604    RULE001_1             [C99] Declaration appears after statements in a compound statement.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.6.2 Compound Statement, or Block - Syntax
604    C99_ext               [C99] Declaration appears after statements in a compound statement.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.6.2 Compound Statement, or Block - Syntax

606    RULE008_3             Object '%s' is declared using typedefs which are different to those in a previous declaration.\\
MISRA-C:2004 Rule 08.03	REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type
606    Min_Decl              Object '%s' is declared using typedefs which are different to those in a previous declaration.\\
MISRA-C:2004 Rule 08.03	REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type

609    RULE001_1             [L] More than 12 pointer, array or function declarators modifying a declaration - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
609    ISO_C90_Limits        [L] More than 12 pointer, array or function declarators modifying a declaration - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

611    RULE001_1             [L] Nesting of 'struct' or 'union' types exceeds 15 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
611    ISO_C90_Limits        [L] Nesting of 'struct' or 'union' types exceeds 15 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

612    RULE001_1             [L] Size of object '%s' exceeds 32767 bytes - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
612    ISO_C90_Limits        [L] Size of object '%s' exceeds 32767 bytes - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

614    RULE001_1             [L] More than 127 block scope identifiers defined within a block - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
614    ISO_C90_Limits        [L] More than 127 block scope identifiers defined within a block - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

617    RULE001_1             [C99] 'const' qualifier has been duplicated.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.3 Type Qualifiers, ISO:C99-6.7.3 Type Qualifiers
617    C99_ext               [C99] 'const' qualifier has been duplicated.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.3 Type Qualifiers, ISO:C99-6.7.3 Type Qualifiers

618    RULE001_1             [C99] 'volatile' qualifier has been duplicated.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.3 Type Qualifiers, ISO:C99-6.7.3 Type Qualifiers
618    C99_ext               [C99] 'volatile' qualifier has been duplicated.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.3 Type Qualifiers, ISO:C99-6.7.3 Type Qualifiers

623    RULE018_1             [U] '%s' has incomplete type and no linkage - this is undefined.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.5 Declarations - Semantics
623    ISO_ExpU              [U] '%s' has incomplete type and no linkage - this is undefined.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.5 Declarations - Semantics

624    RULE008_3             Function '%s' is declared using typedefs which are different to those in a previous declaration.\\
MISRA-C:2004 Rule 08.03	REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type
624    Min_Decl              Function '%s' is declared using typedefs which are different to those in a previous declaration.\\
MISRA-C:2004 Rule 08.03	REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type

625    RULE001_2             [U] '%s' has been declared with both internal and external linkage - the behaviour is undefined.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.2 Linkages of Identifiers
625    ISO_ExpU              [U] '%s' has been declared with both internal and external linkage - the behaviour is undefined.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.2 Linkages of Identifiers

626    RULE008_4             [U] '%s' has different type to previous declaration (which is no longer in scope).\\
MISRA-C:2004 Rule 08.04	REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type
626    ISO_ExpU              [U] '%s' has different type to previous declaration (which is no longer in scope).\\
MISRA-C:2004 Rule 08.04	REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type

627    RULE008_4             [C] '%s' has different type to previous declaration in the same scope.\\
MISRA-C:2004 Rule 08.04	REFERENCE - ISO:C90-6.5 Declarations - Constraints
627    Constraint            [C] '%s' has different type to previous declaration in the same scope.\\
MISRA-C:2004 Rule 08.04	REFERENCE - ISO:C90-6.5 Declarations - Constraints

628    RULE008_4             [C] '%s' has different type to previous declaration at wider scope.\\
MISRA-C:2004 Rule 08.04	REFERENCE - ISO:C90-6.5 Declarations - Constraints
628    Constraint            [C] '%s' has different type to previous declaration at wider scope.\\
MISRA-C:2004 Rule 08.04	REFERENCE - ISO:C90-6.5 Declarations - Constraints

630    RULE008_9             [U] More than one definition of '%s' (with external linkage).\\
MISRA-C:2004 Rule 08.09	REFERENCE - ISO:C90-6.7 External Definitions - Semantics
630    ISO_ExpU              [U] More than one definition of '%s' (with external linkage).\\
MISRA-C:2004 Rule 08.09	REFERENCE - ISO:C90-6.7 External Definitions - Semantics

632    RULE001_2             [U] Tentative definition of '%s' with internal linkage cannot have unknown size.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.7.2 External Object Definitions
632    ISO_ExpU              [U] Tentative definition of '%s' with internal linkage cannot have unknown size.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.7.2 External Object Definitions

633    RULE001_1             [E] Empty structures and unions are a language extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Syntax
633    Lang_ext              [E] Empty structures and unions are a language extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Syntax

634    RULE006_4             [I] Bit-field is not declared explicitly as unsigned or signed.\\
MISRA-C:2004 Rule 06.04	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics
634    ISO_ImplDef           [I] Bit-field is not declared explicitly as unsigned or signed.\\
MISRA-C:2004 Rule 06.04	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics

635    RULE006_4             [E] Only bit-fields of type int, signed int or unsigned int are supported in ISO-C.\\
MISRA-C:2004 Rule 06.04	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics
635    Lang_ext              [E] Only bit-fields of type int, signed int or unsigned int are supported in ISO-C.\\
MISRA-C:2004 Rule 06.04	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics

636    RULE018_1             [U] There are no named members in this 'struct' or 'union'.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics
636    ISO_ExpU              [U] There are no named members in this 'struct' or 'union'.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics

639    RULE001_1             [L] Number of members in 'struct' or 'union' exceeds 127 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
639    ISO_C90_Limits        [L] Number of members in 'struct' or 'union' exceeds 127 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

647    RULE001_1             [L] Number of enumeration constants exceeds 127 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
647    ISO_C90_Limits        [L] Number of enumeration constants exceeds 127 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

654    RULE001_2             [U] Using 'const' or 'volatile' in a function return type is undefined.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.3 Type Qualifiers - Semantics
654    ISO_ExpU              [U] Using 'const' or 'volatile' in a function return type is undefined.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.3 Type Qualifiers - Semantics

658    RULE001_2             [U] Parameter cannot have 'void' type.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.4.3 Function Declarators - Semantics
658    ISO_ExpU              [U] Parameter cannot have 'void' type.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.4.3 Function Declarators - Semantics

660    RULE001_1             [E] Defining an unnamed member in a struct or union. This is a language extension.\\
MISRA-C:2004 Rule 01.01
660    Lang_ext              [E] Defining an unnamed member in a struct or union. This is a language extension.\\
MISRA-C:2004 Rule 01.01

661    RULE001_2             [U] '%s()' may not have a storage class specifier of 'static' when declared at block scope.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.1 Storage-Class Specifiers - Semantics
661    ISO_ExpU              [U] '%s()' may not have a storage class specifier of 'static' when declared at block scope.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.1 Storage-Class Specifiers - Semantics

662    RULE001_1             [E] Accessing a member of an unnamed struct or union member in this way is a language extension.\\
MISRA-C:2004 Rule 01.01
662    Lang_ext              [E] Accessing a member of an unnamed struct or union member in this way is a language extension.\\
MISRA-C:2004 Rule 01.01

667    RULE001_2             [U] '%s' is declared as a typedef and may not be redeclared as an object at an inner scope without an explicit type specifier.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.6 Type Definitions - Semantics
667    ISO_ExpU              [U] '%s' is declared as a typedef and may not be redeclared as an object at an inner scope without an explicit type specifier.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.6 Type Definitions - Semantics

668    RULE001_2             [U] '%s' is declared as a typedef and may not be redeclared as a member of a 'struct' or 'union' without an explicit type specifier.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.6 Type Definitions - Semantics
668    ISO_ExpU              [U] '%s' is declared as a typedef and may not be redeclared as a member of a 'struct' or 'union' without an explicit type specifier.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.6 Type Definitions - Semantics

672    RULE001_2             [U] The initializer for a 'struct', 'union' or array is not enclosed in braces.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.7 Initialization - Semantics
672    ISO_ExpU              [U] The initializer for a 'struct', 'union' or array is not enclosed in braces.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.5.7 Initialization - Semantics

676    RULE001_2             [u] Array element is of function type. Arrays cannot be constructed from function types.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.5 Types
676    ISO_ImpU              [u] Array element is of function type. Arrays cannot be constructed from function types.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.5 Types

678    RULE001_2             [u] Array element is array of unknown size. Arrays cannot be constructed from incomplete types.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.5 Types
678    ISO_ImpU              [u] Array element is array of unknown size. Arrays cannot be constructed from incomplete types.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.5 Types

679    RULE009_2             Redundant braces found in initializer.\\
MISRA-C:2004 Rule 09.02	REFERENCE - ISO:C90-6.5.7 Initialization - Syntax, Semantics
679    Min_Array             Redundant braces found in initializer.\\
MISRA-C:2004 Rule 09.02	REFERENCE - ISO:C90-6.5.7 Initialization - Syntax, Semantics

680    RULE001_2             [u] Array element is 'void' or an incomplete 'struct' or 'union'. Arrays cannot be constructed from incomplete types.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.5 Types
680    ISO_ImpU              [u] Array element is 'void' or an incomplete 'struct' or 'union'. Arrays cannot be constructed from incomplete types.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.5 Types

686    RULE009_2             Array has fewer initializers than its declared size. Default initialization is applied to the remainder of the array elements.\\
MISRA-C:2004 Rule 09.02	REFERENCE - ISO:C90-6.5.7 Initialization - Semantics
686    Maj_Decl              Array has fewer initializers than its declared size. Default initialization is applied to the remainder of the array elements.\\
MISRA-C:2004 Rule 09.02	REFERENCE - ISO:C90-6.5.7 Initialization - Semantics

689    RULE014_1             [u] 'Switch' statement will bypass the initialization of this local variable.\\
MISRA-C:2004 Rule 14.01	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects
689    ISO_ImpU              [u] 'Switch' statement will bypass the initialization of this local variable.\\
MISRA-C:2004 Rule 14.01	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects

693    RULE009_2             Struct initializer is missing the optional {.\\
MISRA-C:2004 Rule 09.02	REFERENCE - ISO:C90-6.5.7 Initialization - Semantics
693    Min_Array             Struct initializer is missing the optional {.\\
MISRA-C:2004 Rule 09.02	REFERENCE - ISO:C90-6.5.7 Initialization - Semantics

694    RULE009_2             Array initializer is missing the optional {.\\
MISRA-C:2004 Rule 09.02	REFERENCE - ISO:C90-6.5.7 Initialization - Semantics
694    Min_Array             Array initializer is missing the optional {.\\
MISRA-C:2004 Rule 09.02	REFERENCE - ISO:C90-6.5.7 Initialization - Semantics

706    RULE001_2             [U] Label '%s' is not unique within this function.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.1 Scopes of Identifiers
706    ISO_ExpU              [U] Label '%s' is not unique within this function.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.1 Scopes of Identifiers

715    RULE001_1             [L] Nesting of control structures (statements) exceeds 15 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
715    ISO_C90_Limits        [L] Nesting of control structures (statements) exceeds 15 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

723    RULE009_3             Initialize none, first only, or all entries in this enumerator list.\\
MISRA-C:2004 Rule 09.03	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers - Semantics
723    Min_Enum              Initialize none, first only, or all entries in this enumerator list.\\
MISRA-C:2004 Rule 09.03	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers - Semantics

735    RULE015_4             Using relational or logical operators in a 'switch' expression is usually a programming error.\\
MISRA-C:2004 Rule 15.04
735    Maj_Stmt              Using relational or logical operators in a 'switch' expression is usually a programming error.\\
MISRA-C:2004 Rule 15.04

739    RULE001_1             [L] Number of 'case' labels exceeds 257 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
739    ISO_C90_Limits        [L] Number of 'case' labels exceeds 257 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

744    RULE016_8             [U] '%s()' has been declared with a non void return type but ends with an implicit 'return ;' statement.\\
MISRA-C:2004 Rule 16.08	REFERENCE - ISO:C90-6.6.6.4 The return Statement - Semantics
744    ISO_ExpU              [U] '%s()' has been declared with a non void return type but ends with an implicit 'return ;' statement.\\
MISRA-C:2004 Rule 16.08	REFERENCE - ISO:C90-6.6.6.4 The return Statement - Semantics

745    RULE016_8             [U] 'return;' found in '%s()', which has been defined with a non-'void' return type.\\
MISRA-C:2004 Rule 16.08	REFERENCE - ISO:C90-6.6.6.4 The return Statement - Semantics
745    ISO_ExpU              [U] 'return;' found in '%s()', which has been defined with a non-'void' return type.\\
MISRA-C:2004 Rule 16.08	REFERENCE - ISO:C90-6.6.6.4 The return Statement - Semantics

750    RULE018_4             A union type specifier has been defined.\\
MISRA-C:2004 Rule 18.04
750    Min_Array             A union type specifier has been defined.\\
MISRA-C:2004 Rule 18.04

759    RULE018_4             An object of union type has been defined.\\
MISRA-C:2004 Rule 18.04
759    Min_Array             An object of union type has been defined.\\
MISRA-C:2004 Rule 18.04

770    RULE014_5             A 'continue' statement has been used.\\
MISRA-C:2004 Rule 14.05
770    Min_Ctrl              A 'continue' statement has been used.\\
MISRA-C:2004 Rule 14.05

771    RULE014_6             More than one 'break' statement has been used to terminate this iteration statement.\\
MISRA-C:2004 Rule 14.06
771    Min_Ctrl              More than one 'break' statement has been used to terminate this iteration statement.\\
MISRA-C:2004 Rule 14.06

777    RULE005_1             [U] External identifier does not differ from other identifier(s) (e.g. '%s') within the specified number of significant characters.\\
MISRA-C:2004 Rule 05.01	REFERENCE - ISO:C90-6.1.2 Identifiers - Implementation Limits
777    ISO_ExpU              [U] External identifier does not differ from other identifier(s) (e.g. '%s') within the specified number of significant characters.\\
MISRA-C:2004 Rule 05.01	REFERENCE - ISO:C90-6.1.2 Identifiers - Implementation Limits

779    RULE005_1             [U] Identifier does not differ from other identifier(s) (e.g. '%s') within the specified number of significant characters.\\
MISRA-C:2004 Rule 05.01	REFERENCE - ISO:C90-6.1.2 Identifiers - Implementation Limits
779    ISO_ExpU              [U] Identifier does not differ from other identifier(s) (e.g. '%s') within the specified number of significant characters.\\
MISRA-C:2004 Rule 05.01	REFERENCE - ISO:C90-6.1.2 Identifiers - Implementation Limits

780    RULE005_6             Another identifier '%s' is already in scope in a different namespace.\\
MISRA-C:2004 Rule 05.06	REFERENCE - ISO:C90-6.1.2.3 Name Spaces of Identifiers
780    Min_Ident             Another identifier '%s' is already in scope in a different namespace.\\
MISRA-C:2004 Rule 05.06	REFERENCE - ISO:C90-6.1.2.3 Name Spaces of Identifiers

781    RULE005_6             '%s' is being used as a structure/union member as well as being a label, tag or ordinary identifier.\\
MISRA-C:2004 Rule 05.06	REFERENCE - ISO:C90-6.1.2.3 Name Spaces of Identifiers
781    Min_Ident             '%s' is being used as a structure/union member as well as being a label, tag or ordinary identifier.\\
MISRA-C:2004 Rule 05.06	REFERENCE - ISO:C90-6.1.2.3 Name Spaces of Identifiers

809    RULE019_3             [U] The '#include' preprocessing directive has not been followed by <h-char-sequence> or "s-char-sequence".\\
MISRA-C:2004 Rule 19.03	REFERENCE - ISO:C90-6.8.2 Source File Inclusion - Semantics
809    ISO_ExpU              [U] The '#include' preprocessing directive has not been followed by <h-char-sequence> or "s-char-sequence".\\
MISRA-C:2004 Rule 19.03	REFERENCE - ISO:C90-6.8.2 Source File Inclusion - Semantics

810    RULE001_1             [L] '#include "%s"' causes nesting to exceed 8 levels - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
810    ISO_C90_Limits        [L] '#include "%s"' causes nesting to exceed 8 levels - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

813    RULE019_2             [U] Using any of the characters ' " or /* in '#include <%s>' gives undefined behaviour.\\
MISRA-C:2004 Rule 19.02	REFERENCE - ISO:C90-6.1.7 Header Names
813    ISO_ExpU              [U] Using any of the characters ' " or /* in '#include <%s>' gives undefined behaviour.\\
MISRA-C:2004 Rule 19.02	REFERENCE - ISO:C90-6.1.7 Header Names

814    RULE019_2             [U] Using the characters ' or /* in '#include "%s"' gives undefined behaviour.\\
MISRA-C:2004 Rule 19.02	REFERENCE - ISO:C90-6.1.7 Header Names
814    ISO_ExpU              [U] Using the characters ' or /* in '#include "%s"' gives undefined behaviour.\\
MISRA-C:2004 Rule 19.02	REFERENCE - ISO:C90-6.1.7 Header Names

828    RULE001_1             [L] More than 8 levels of nested conditional inclusion - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
828    ISO_C90_Limits        [L] More than 8 levels of nested conditional inclusion - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

830    RULE001_1             [E] Unrecognized text encountered after a preprocessing directive.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8 Preprocessing Directives - Syntax
830    Lang_ext              [E] Unrecognized text encountered after a preprocessing directive.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8 Preprocessing Directives - Syntax

831    RULE019_2             [E] Use of '\\' in this '#include' line is a PC extension - this usage is non-portable.\\
MISRA-C:2004 Rule 19.02	REFERENCE - ISO:C90-6.1.7 Header Names - Semantics
831    Lang_ext              [E] Use of '\\' in this '#include' line is a PC extension - this usage is non-portable.\\
MISRA-C:2004 Rule 19.02	REFERENCE - ISO:C90-6.1.7 Header Names - Semantics

836    RULE020_1             [U] Definition of macro named 'defined'.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-6.8.8 Predefined Macro Names
836    ISO_ExpU              [U] Definition of macro named 'defined'.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-6.8.8 Predefined Macro Names

837    RULE001_2             [U] Use of '#undef' to remove the operator 'defined'.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.8 Predefined Macro Names
837    ISO_ExpU              [U] Use of '#undef' to remove the operator 'defined'.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.8 Predefined Macro Names

841    RULE019_6             Using '#undef'.\\
MISRA-C:2004 Rule 19.06	REFERENCE - ISO:C90-6.8.3.5 Scope of Macro Definitions
841    Min_Prepro            Using '#undef'.\\
MISRA-C:2004 Rule 19.06	REFERENCE - ISO:C90-6.8.3.5 Scope of Macro Definitions

842    RULE019_5             Using #define or #undef inside a function.\\
MISRA-C:2004 Rule 19.05	REFERENCE - ISO:C90-6.8.3.5 Scope of Macro Definitions
842    Min_Prepro            Using #define or #undef inside a function.\\
MISRA-C:2004 Rule 19.05	REFERENCE - ISO:C90-6.8.3.5 Scope of Macro Definitions

848    RULE020_1             [U] Attempting to #undef '%s', which is a predefined macro name.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-6.8.8 Predefined Macro Names
848    ISO_ExpU              [U] Attempting to #undef '%s', which is a predefined macro name.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-6.8.8 Predefined Macro Names

850    RULE019_8             [C99] Macro argument is empty.\\
MISRA-C:2004 Rule 19.08	REFERENCE - ISO:C90-6.8.3 Macro Replacement - Semantics; ISO:C99 6.10.3
850    C99_ext               [C99] Macro argument is empty.\\
MISRA-C:2004 Rule 19.08	REFERENCE - ISO:C90-6.8.3 Macro Replacement - Semantics; ISO:C99 6.10.3

853    RULE019_9             [U] Macro arguments contain a sequence of tokens that has the form of a preprocessing directive.\\
MISRA-C:2004 Rule 19.09	REFERENCE - ISO:C90-6.8.3 Macro Replacement - Semantics
853    ISO_ExpU              [U] Macro arguments contain a sequence of tokens that has the form of a preprocessing directive.\\
MISRA-C:2004 Rule 19.09	REFERENCE - ISO:C90-6.8.3 Macro Replacement - Semantics

854    RULE020_1             [U] Attempting to #define '%s', which is a predefined macro name.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-6.8.8 Predefined Macro Names
854    ISO_ExpU              [U] Attempting to #define '%s', which is a predefined macro name.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-6.8.8 Predefined Macro Names

856    RULE019_8             [C] Fewer arguments in macro call than specified in definition.\\
MISRA-C:2004 Rule 19.08	REFERENCE - ISO:C90-6.8.3 Macro Replacement - Constraints
856    Constraint            [C] Fewer arguments in macro call than specified in definition.\\
MISRA-C:2004 Rule 19.08	REFERENCE - ISO:C90-6.8.3 Macro Replacement - Constraints

857    RULE001_1             [L] Number of macro definitions exceeds 1024 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
857    ISO_C90_Limits        [L] Number of macro definitions exceeds 1024 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

858    RULE001_1             [L] Number of macro parameters exceeds 31 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
858    ISO_C90_Limits        [L] Number of macro parameters exceeds 31 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

859    RULE001_1             [L] Number of arguments in macro call exceeds 31 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits
859    ISO_C90_Limits        [L] Number of arguments in macro call exceeds 31 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation Limits

864    RULE001_2             [U] '#line' directive specifies line number which is not in the range 1 to 32767.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.4 Line Control - Semantics
864    ISO_ExpU              [U] '#line' directive specifies line number which is not in the range 1 to 32767.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.4 Line Control - Semantics

865    RULE001_2             [U] '#line' directive is badly formed.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.4 Line Control - Semantics
865    ISO_ExpU              [U] '#line' directive is badly formed.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.4 Line Control - Semantics

867    RULE001_2             [U] '#line' has not been followed by a line number.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.4 Line Control - Semantics
867    ISO_ExpU              [U] '#line' has not been followed by a line number.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.4 Line Control - Semantics

872    RULE001_2             [U] Result of '##' operator is not a legal preprocessing token.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.3.3 The ## Operator - Semantics
872    ISO_ExpU              [U] Result of '##' operator is not a legal preprocessing token.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.8.3.3 The ## Operator - Semantics

874    RULE001_2             [U] Character string literal and wide character string literal are adjacent.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.4 String Literals - Semantics
874    ISO_ExpU              [U] Character string literal and wide character string literal are adjacent.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.4 String Literals - Semantics

875    RULE001_1             [L] String literal exceeds 509 characters - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation limits
875    ISO_C90_Limits        [L] String literal exceeds 509 characters - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.2.4.1 Translation limits

878    RULE003_1             Using wide character or string literals.\\
MISRA-C:2004 Rule 03.01
878    Min_Const             Using wide character or string literals.\\
MISRA-C:2004 Rule 03.01

880    RULE19_12             Using # and ## operators in the same macro definition.\\
MISRA-C:2004 Rule 19.12	REFERENCE - ISO:C90-6.8.3.2 The # Operator - Semantics
880    Min_Prepro            Using # and ## operators in the same macro definition.\\
MISRA-C:2004 Rule 19.12	REFERENCE - ISO:C90-6.8.3.2 The # Operator - Semantics

881    RULE19_12             Using multiple ## operators in the same macro definition.\\
MISRA-C:2004 Rule 19.12	REFERENCE - ISO:C90-6.8.3.3 The ## Operator - Semantics
881    Min_Prepro            Using multiple ## operators in the same macro definition.\\
MISRA-C:2004 Rule 19.12	REFERENCE - ISO:C90-6.8.3.3 The ## Operator - Semantics

883    RULE19_15             Include file code is not protected against repeated inclusion\\
MISRA-C:2004 Rule 19.15
883    Min_Prepro            Include file code is not protected against repeated inclusion\\
MISRA-C:2004 Rule 19.15

884    RULE19_12             Using multiple # operators in the same macro definition.\\
MISRA-C:2004 Rule 19.12	REFERENCE - ISO:C90-6.8.3.2 The # Operator - Semantics
884    Min_Prepro            Using multiple # operators in the same macro definition.\\
MISRA-C:2004 Rule 19.12	REFERENCE - ISO:C90-6.8.3.2 The # Operator - Semantics

885    RULE19_14             [U] The token 'defined' is generated in the expansion of this macro.\\
MISRA-C:2004 Rule 19.14	REFERENCE - ISO:C90-6.8.1 Conditional Inclusion - Semantics
885    ISO_ExpU              [U] The token 'defined' is generated in the expansion of this macro.\\
MISRA-C:2004 Rule 19.14	REFERENCE - ISO:C90-6.8.1 Conditional Inclusion - Semantics

887    RULE19_14             [U] Use of 'defined' must match either 'defined(identifier)' or 'defined identifier'.\\
MISRA-C:2004 Rule 19.14	REFERENCE - ISO:C90-6.8.1 Conditional Inclusion - Semantics
887    ISO_ExpU              [U] Use of 'defined' must match either 'defined(identifier)' or 'defined identifier'.\\
MISRA-C:2004 Rule 19.14	REFERENCE - ISO:C90-6.8.1 Conditional Inclusion - Semantics

888    RULE19_14             [U] 'defined' requires an identifier as an argument.\\
MISRA-C:2004 Rule 19.14	REFERENCE - ISO:C90-6.8.1 Conditional Inclusion - Semantics
888    ISO_ExpU              [U] 'defined' requires an identifier as an argument.\\
MISRA-C:2004 Rule 19.14	REFERENCE - ISO:C90-6.8.1 Conditional Inclusion - Semantics

899    RULE001_1             [E] Unrecognized preprocessing directive has been ignored - assumed to be a language extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8 Preprocessing Directives, ISO:C90-6.8.3.2 The # Operator
899    Lang_ext              [E] Unrecognized preprocessing directive has been ignored - assumed to be a language extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8 Preprocessing Directives, ISO:C90-6.8.3.2 The # Operator

930    RULE001_1             [C99] Trailing comma at the end of an enumerator-list.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.2.2 Syntax
930    C99_ext               [C99] Trailing comma at the end of an enumerator-list.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.2.2 Syntax

942    RULE001_2             [U] A * can only be used to specify array size within function prototype scope.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C99-6.7.5.3 Function Declarators - Semantics
942    ISO_ExpU              [U] A * can only be used to specify array size within function prototype scope.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C99-6.7.5.3 Function Declarators - Semantics

945    RULE001_1             [C99] WARNING. Operand of sizeof is an expression of variable length array type.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.5.3.4 The sizeof operator - Semantics
945    C99_ext               [C99] WARNING. Operand of sizeof is an expression of variable length array type.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.5.3.4 The sizeof operator - Semantics

1001   RULE001_1             [E] '#include %s' is a VMS extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8.2 Form of '#include' directives
1001   Lang_ext              [E] '#include %s' is a VMS extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8.2 Form of '#include' directives

1002   RULE001_1             [E] '%s' is not a legal identifier in ISO C.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.1.2 Identifiers
1002   Lang_ext              [E] '%s' is not a legal identifier in ISO C.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.1.2 Identifiers

1003   RULE001_1             [E] '#%s' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8 Preprocessing Directives - Syntax
1003   Lang_ext              [E] '#%s' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8 Preprocessing Directives - Syntax

1006   RULE001_1             [E] This in-line assembler construct is a language extension. The code has been ignored.\\
MISRA-C:2004 Rule 01.01
1006   Lang_ext              [E] This in-line assembler construct is a language extension. The code has been ignored.\\
MISRA-C:2004 Rule 01.01

1008   RULE001_1             [E] '#%s' is not a legal ISO C preprocessing directive.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8 Preprocessing Directives - Syntax
1008   Lang_ext              [E] '#%s' is not a legal ISO C preprocessing directive.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8 Preprocessing Directives - Syntax

1011   RULE002_2             [C99] Use of '//' comment.\\
MISRA-C:2004 Rule 02.02	REFERENCE - ISO:C99-6.4.9 Comments
1011   C99_ext               [C99] Use of '//' comment.\\
MISRA-C:2004 Rule 02.02	REFERENCE - ISO:C99-6.4.9 Comments

1012   RULE001_1             [E] Use of a C++ reference type ('type &') will be treated as a language extension.\\
MISRA-C:2004 Rule 01.01
1012   Lang_ext              [E] Use of a C++ reference type ('type &') will be treated as a language extension.\\
MISRA-C:2004 Rule 01.01

1014   RULE001_1             [E] Non-standard type specifier - this will be treated as a language extension.\\
MISRA-C:2004 Rule 01.01
1014   Lang_ext              [E] Non-standard type specifier - this will be treated as a language extension.\\
MISRA-C:2004 Rule 01.01

1015   RULE001_1             [E] '%s' is not a legal keyword in ISO C - this will be treated as a language extension.\\
MISRA-C:2004 Rule 01.01
1015   Lang_ext              [E] '%s' is not a legal keyword in ISO C - this will be treated as a language extension.\\
MISRA-C:2004 Rule 01.01

1018   RULE001_1             [C99] Use of LL suffix.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.4.4.1 Integer Constants - Syntax
1018   C99_ext               [C99] Use of LL suffix.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.4.4.1 Integer Constants - Syntax

1019   RULE001_1             [E] '@ address' is not supported in ISO C - this will be treated as a language extension.\\
MISRA-C:2004 Rule 01.01
1019   Lang_ext              [E] '@ address' is not supported in ISO C - this will be treated as a language extension.\\
MISRA-C:2004 Rule 01.01

1020   RULE001_1             [E] '__typeof__' is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 01.01
1020   Lang_ext              [E] '__typeof__' is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 01.01

1021   RULE001_1             [E] A statement expression is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 01.01
1021   Lang_ext              [E] A statement expression is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 01.01

1022   RULE001_1             [E] '__alignof__' is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 01.01
1022   Lang_ext              [E] '__alignof__' is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 01.01

1026   RULE001_1             [E] The indicated @word construct has been ignored.\\
MISRA-C:2004 Rule 01.01
1026   Lang_ext              [E] The indicated @word construct has been ignored.\\
MISRA-C:2004 Rule 01.01

1027   RULE001_1             [C99] Use of type 'long long'.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.2.5 Types
1027   C99_ext               [C99] Use of type 'long long'.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.2.5 Types

1028   RULE001_1             [E] Use of the sizeof operator in a preprocessing directive is a language extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8.1 Conditional Inclusion - Semantics, ISO:C90-6.1.1 Keywords
1028   Lang_ext              [E] Use of the sizeof operator in a preprocessing directive is a language extension.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.8.1 Conditional Inclusion - Semantics, ISO:C90-6.1.1 Keywords

1029   RULE001_1             [E] Whitespace encountered between backslash and new-line has been ignored.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.1.1.2 Translation Phases
1029   Lang_ext              [E] Whitespace encountered between backslash and new-line has been ignored.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-5.1.1.2 Translation Phases

1030   RULE001_1             [C99] Macro defined with variable argument list.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.10 Preprocessing directives - Syntax
1030   C99_ext               [C99] Macro defined with variable argument list.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.10 Preprocessing directives - Syntax

1031   RULE001_1             [C99] Initializer for 'struct', 'union' or array type is not a constant expression.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.7 Initialization - Constraints
1031   C99_ext               [C99] Initializer for 'struct', 'union' or array type is not a constant expression.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C90-6.5.7 Initialization - Constraints

1034   RULE001_1             [E] Macro defined with named variable argument list. This is a language extension.\\
MISRA-C:2004 Rule 01.01
1034   Lang_ext              [E] Macro defined with named variable argument list. This is a language extension.\\
MISRA-C:2004 Rule 01.01

1035   RULE001_1             [E] No macro arguments supplied for variable argument list. This is a language extension.\\
MISRA-C:2004 Rule 01.01
1035   Lang_ext              [E] No macro arguments supplied for variable argument list. This is a language extension.\\
MISRA-C:2004 Rule 01.01

1036   RULE001_1             [E] Comma before ## ignored in expansion of variadic macro. This is a language extension.\\
MISRA-C:2004 Rule 01.01
1036   Lang_ext              [E] Comma before ## ignored in expansion of variadic macro. This is a language extension.\\
MISRA-C:2004 Rule 01.01

1037   RULE001_1             [E] Arrays of length zero are a language extension.\\
MISRA-C:2004 Rule 01.01
1037   Lang_ext              [E] Arrays of length zero are a language extension.\\
MISRA-C:2004 Rule 01.01

1038   RULE001_1             [E] The sequence ", ##__VA_ARGS__" is a language extension.\\
MISRA-C:2004 Rule 01.01
1038   Lang_ext              [E] The sequence ", ##__VA_ARGS__" is a language extension.\\
MISRA-C:2004 Rule 01.01

1041   RULE001_1             [E] Empty aggregate initializers are a language extension.\\
MISRA-C:2004 Rule 01.01
1041   Lang_ext              [E] Empty aggregate initializers are a language extension.\\
MISRA-C:2004 Rule 01.01

1042   RULE001_1             [E] Using I64 or UI64 as an integer constant suffix. This is a language extension.\\
MISRA-C:2004 Rule 01.01
1042   Lang_ext              [E] Using I64 or UI64 as an integer constant suffix. This is a language extension.\\
MISRA-C:2004 Rule 01.01

1043   RULE001_1             [E] Defining an anonymous union object. This is a language extension.\\
MISRA-C:2004 Rule 01.01
1043   Lang_ext              [E] Defining an anonymous union object. This is a language extension.\\
MISRA-C:2004 Rule 01.01

1044   RULE001_1             [E] Defining an anonymous struct object. This is a language extension.\\
MISRA-C:2004 Rule 01.01
1044   Lang_ext              [E] Defining an anonymous struct object. This is a language extension.\\
MISRA-C:2004 Rule 01.01

1051   RULE001_1             [C99] A variable length array has been declared.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.7.5.2 Array declarators
1051   C99_ext               [C99] A variable length array has been declared.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.7.5.2 Array declarators

1052   RULE001_1             [C99] A variable length array of unspecified size has been declared.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.7.5.2 Array declarators
1052   C99_ext               [C99] A variable length array of unspecified size has been declared.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.7.5.2 Array declarators

1053   RULE001_1             [C99] Designators have been used in this initialization list.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.7.8 Initialization
1053   C99_ext               [C99] Designators have been used in this initialization list.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.7.8 Initialization

1054   RULE001_1             [C99] A compound literal has been used.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.5.2.5 Compound literals
1054   C99_ext               [C99] A compound literal has been used.\\
MISRA-C:2004 Rule 01.01	REFERENCE - ISO:C99-6.5.2.5 Compound literals

1281   RULE010_6             Integer literal constant is of an unsigned type but does not include a "U" suffix.\\
MISRA-C:2004 Rule 10.06	REFERENCE - ISO:C90-6.1.3.2 (Integer Constants)
1281   Min_Const             Integer literal constant is of an unsigned type but does not include a "U" suffix.\\
MISRA-C:2004 Rule 10.06	REFERENCE - ISO:C90-6.1.3.2 (Integer Constants)

1317   RULE010_1             Value of constant expression is not in the enum type to which it is being converted.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1317   Maj_Enum              Value of constant expression is not in the enum type to which it is being converted.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1330   RULE016_4             The parameter identifiers in this function declaration differ from those in a previous declaration.\\
MISRA-C:2004 Rule 16.04
1330   Min_Func              The parameter identifiers in this function declaration differ from those in a previous declaration.\\
MISRA-C:2004 Rule 16.04

1331   RULE008_3             Type or number of arguments doesn't match previous use of the function.\\
MISRA-C:2004 Rule 08.03
1331   Maj_Func              Type or number of arguments doesn't match previous use of the function.\\
MISRA-C:2004 Rule 08.03

1332   RULE008_3             Type or number of arguments doesn't match prototype found later.\\
MISRA-C:2004 Rule 08.03
1332   Maj_Func              Type or number of arguments doesn't match prototype found later.\\
MISRA-C:2004 Rule 08.03

1333   RULE008_3             Type or number of arguments doesn't match function definition found later.\\
MISRA-C:2004 Rule 08.03
1333   Maj_Func              Type or number of arguments doesn't match function definition found later.\\
MISRA-C:2004 Rule 08.03

1334   RULE016_4             The parameter identifiers in the prototypes of these functions/function pointers are different.\\
MISRA-C:2004 Rule 16.04
1334   Min_Func              The parameter identifiers in the prototypes of these functions/function pointers are different.\\
MISRA-C:2004 Rule 16.04

1335   RULE016_3             Parameter identifiers missing in function prototype declaration.\\
MISRA-C:2004 Rule 16.03
1335   Min_Func              Parameter identifiers missing in function prototype declaration.\\
MISRA-C:2004 Rule 16.03

1336   RULE016_3             Parameter identifiers missing in declaration of a function type.\\
MISRA-C:2004 Rule 16.03
1336   Min_Func              Parameter identifiers missing in declaration of a function type.\\
MISRA-C:2004 Rule 16.03

1401   RULE010_1             Function parameter of enum type is being passed the value of an enum constant of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1401   Maj_Enum              Function parameter of enum type is being passed the value of an enum constant of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1402   RULE010_1             Object of enum type is being assigned the value of an enum constant of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1402   Maj_Enum              Object of enum type is being assigned the value of an enum constant of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1403   RULE010_1             Function of enum type is returning the value of an enum constant of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1403   Maj_Enum              Function of enum type is returning the value of an enum constant of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1411   RULE010_1             Function parameter of enum type is being passed the value of a constant, non-enum argument.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1411   Maj_Enum              Function parameter of enum type is being passed the value of a constant, non-enum argument.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1412   RULE010_1             Object of enum type is being assigned the value of a constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1412   Maj_Enum              Object of enum type is being assigned the value of a constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1413   RULE010_1             Function of enum type is returning the value of a constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1413   Maj_Enum              Function of enum type is returning the value of a constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1421   RULE010_1             Function parameter of enum type is being passed the value of an object of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1421   Maj_Enum              Function parameter of enum type is being passed the value of an object of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1422   RULE010_1             Object of enum type is being assigned the value of an object of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1422   Maj_Enum              Object of enum type is being assigned the value of an object of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1423   RULE010_1             Function of enum type is returning the value of an object of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1423   Maj_Enum              Function of enum type is returning the value of an object of a different enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1431   RULE010_1             Function parameter of non-enum type is being passed the value of an object of enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1431   Min_Enum              Function parameter of non-enum type is being passed the value of an object of enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1433   RULE010_1             Function of non-enum type is returning the value of an object of enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1433   Min_Enum              Function of non-enum type is returning the value of an object of enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1441   RULE010_1             Function parameter of enum type is being passed the value of a non-constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1441   Maj_Enum              Function parameter of enum type is being passed the value of a non-constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1442   RULE010_1             Object of enum type is being assigned the value of a non-constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1442   Maj_Enum              Object of enum type is being assigned the value of a non-constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1443   RULE010_1             Function of enum type is returning the value of a non-constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1443   Maj_Enum              Function of enum type is returning the value of a non-constant, non-enum expression.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1460   RULE014_1             'Switch' label value, %s, not contained in enum type.\\
MISRA-C:2004 Rule 14.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1460   Maj_Enum              'Switch' label value, %s, not contained in enum type.\\
MISRA-C:2004 Rule 14.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1461   RULE010_1             Value of constant expression is not in the enum type to which it is being converted, but is bitwise OR of constants in the enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers
1461   Maj_Enum              Value of constant expression is not in the enum type to which it is being converted, but is bitwise OR of constants in the enum type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.5.2.2 Enumeration Specifiers

1503   RULE014_1             The function '%1s' is defined but is not used within this project.\\
MISRA-C:2004 Rule 14.01
1503   CMA_declaration       The function '%1s' is defined but is not used within this project.\\
MISRA-C:2004 Rule 14.01

1504   RULE08_10             The object '%1s' is only referenced in the translation unit where it is defined.\\
MISRA-C:2004 Rule 08.10
1504   CMA_maintenance       The object '%1s' is only referenced in the translation unit where it is defined.\\
MISRA-C:2004 Rule 08.10

1505   RULE08_10             The function '%1s' is only referenced in the translation unit where it is defined.\\
MISRA-C:2004 Rule 08.10
1505   CMA_maintenance       The function '%1s' is only referenced in the translation unit where it is defined.\\
MISRA-C:2004 Rule 08.10

1506   RULE005_3             The identifier '%1s' is declared as a typedef and is used elsewhere for a different kind of declaration.\\
MISRA-C:2004 Rule 05.03
1506   CMA_maintenance       The identifier '%1s' is declared as a typedef and is used elsewhere for a different kind of declaration.\\
MISRA-C:2004 Rule 05.03

1507   RULE005_3             '%1s' is used as a typedef for different types.\\
MISRA-C:2004 Rule 05.03
1507   CMA_maintenance       '%1s' is used as a typedef for different types.\\
MISRA-C:2004 Rule 05.03

1508   RULE005_3             The typedef '%1s' is declared in more than one location.\\
MISRA-C:2004 Rule 05.03
1508   CMA_maintenance       The typedef '%1s' is declared in more than one location.\\
MISRA-C:2004 Rule 05.03

1509   RULE008_9             '%1s' has external linkage and has multiple definitions.\\
MISRA-C:2004 Rule 08.09
1509   CMA_warning           '%1s' has external linkage and has multiple definitions.\\
MISRA-C:2004 Rule 08.09

1510   RULE008_4             '%1s' has external linkage and has incompatible declarations.\\
MISRA-C:2004 Rule 08.04
1510   CMA_warning           '%1s' has external linkage and has incompatible declarations.\\
MISRA-C:2004 Rule 08.04

1513   RULE008_8             Identifier '%1s' with external linkage has separate non-defining declarations in more than one location.\\
MISRA-C:2004 Rule 08.08
1513   CMA_maintenance       Identifier '%1s' with external linkage has separate non-defining declarations in more than one location.\\
MISRA-C:2004 Rule 08.08

1514   RULE008_7             The object '%1s' is only referenced by function '%2s', in the translation unit where it is defined\\
MISRA-C:2004 Rule 08.07
1514   CMA_maintenance       The object '%1s' is only referenced by function '%2s', in the translation unit where it is defined\\
MISRA-C:2004 Rule 08.07

1520   RULE016_2             Functions are indirectly recursive.\\
MISRA-C:2004 Rule 16.02
1520   CMA_maintenance       Functions are indirectly recursive.\\
MISRA-C:2004 Rule 16.02

1525   RULE005_5             Object/function with external linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 05.05
1525   CMA_maintenance       Object/function with external linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 05.05

1526   RULE005_5             Object with no linkage has same identifier as another object/function with external linkage.\\
MISRA-C:2004 Rule 05.05
1526   CMA_maintenance       Object with no linkage has same identifier as another object/function with external linkage.\\
MISRA-C:2004 Rule 05.05

1527   RULE005_5             Object/function with internal linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 05.05
1527   CMA_maintenance       Object/function with internal linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 05.05

1528   RULE005_5             Object with no linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 05.05
1528   CMA_maintenance       Object with no linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 05.05

1529   RULE005_5             Object with no linkage has same identifier as another object with static storage duration but no linkage.\\
MISRA-C:2004 Rule 05.05
1529   CMA_maintenance       Object with no linkage has same identifier as another object with static storage duration but no linkage.\\
MISRA-C:2004 Rule 05.05

2001   RULE014_4             A 'goto' statement has been used.\\
MISRA-C:2004 Rule 14.04
2001   Min_Ctrl              A 'goto' statement has been used.\\
MISRA-C:2004 Rule 14.04

2002   RULE015_3             No 'default' label found in this 'switch' statement.\\
MISRA-C:2004 Rule 15.03
2002   Min_Switch            No 'default' label found in this 'switch' statement.\\
MISRA-C:2004 Rule 15.03

2003   RULE015_2             The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through.\\
MISRA-C:2004 Rule 15.02
2003   Min_Switch            The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through.\\
MISRA-C:2004 Rule 15.02

2004   RULE14_10             No concluding 'else' exists in this 'if'-'else'-'if' statement.\\
MISRA-C:2004 Rule 14.10
2004   Min_Ctrl              No concluding 'else' exists in this 'if'-'else'-'if' statement.\\
MISRA-C:2004 Rule 14.10

2006   RULE014_7             '%s()' has more than one 'return' path.\\
MISRA-C:2004 Rule 14.07
2006   Min_Func              '%s()' has more than one 'return' path.\\
MISRA-C:2004 Rule 14.07

2008   RULE014_1             Code statements precede the first label in this 'switch' construct.\\
MISRA-C:2004 Rule 14.01	REFERENCE - ISO:C90-6.6.4.2 The switch Statement - Semantics
2008   Maj_Redun             Code statements precede the first label in this 'switch' construct.\\
MISRA-C:2004 Rule 14.01	REFERENCE - ISO:C90-6.6.4.2 The switch Statement - Semantics

2009   RULE015_3             This 'default' label is not the final 'case' label within the 'switch' block.\\
MISRA-C:2004 Rule 15.03
2009   Min_Switch            This 'default' label is not the final 'case' label within the 'switch' block.\\
MISRA-C:2004 Rule 15.03

2019   RULE015_1             'Switch' label is located within a nested code block.\\
MISRA-C:2004 Rule 15.01
2019   Min_Switch            'Switch' label is located within a nested code block.\\
MISRA-C:2004 Rule 15.01

2020   RULE015_2             Final 'switch' clause does not end with an explicit 'jump' statement.\\
MISRA-C:2004 Rule 15.02
2020   Min_Switch            Final 'switch' clause does not end with an explicit 'jump' statement.\\
MISRA-C:2004 Rule 15.02

2050   RULE008_2             The 'int' type specifier has been omitted from a function declaration.\\
MISRA-C:2004 Rule 08.02
2050   Min_Decl              The 'int' type specifier has been omitted from a function declaration.\\
MISRA-C:2004 Rule 08.02

2051   RULE008_2             The 'int' type specifier has been omitted from an object declaration.\\
MISRA-C:2004 Rule 08.02
2051   Min_Decl              The 'int' type specifier has been omitted from an object declaration.\\
MISRA-C:2004 Rule 08.02

2212   RULE014_8             Body of control statement is not enclosed within braces.\\
MISRA-C:2004 Rule 14.09
2212   RULE014_9             Body of control statement is not enclosed within braces.\\
MISRA-C:2004 Rule 14.09
2212   Min_Brace             Body of control statement is not enclosed within braces.\\
MISRA-C:2004 Rule 14.09

2214   RULE014_8             Body of control statement is on the same line and is not enclosed within braces.\\
MISRA-C:2004 Rule 14.09
2214   RULE014_9             Body of control statement is on the same line and is not enclosed within braces.\\
MISRA-C:2004 Rule 14.09
2214   Min_Brace             Body of control statement is on the same line and is not enclosed within braces.\\
MISRA-C:2004 Rule 14.09

2462   RULE013_5             The variable initialized in the first expression of this 'for' statement is not the variable identified as the 'loop control variable' (%s).\\
MISRA-C:2004 Rule 13.05
2462   Min_Ctrl              The variable initialized in the first expression of this 'for' statement is not the variable identified as the 'loop control variable' (%s).\\
MISRA-C:2004 Rule 13.05

2463   RULE013_5             The variable incremented in the third expression of this 'for' statement is not the variable identified as the 'loop control variable' (%s).\\
MISRA-C:2004 Rule 13.05
2463   Min_Ctrl              The variable incremented in the third expression of this 'for' statement is not the variable identified as the 'loop control variable' (%s).\\
MISRA-C:2004 Rule 13.05

2469   RULE013_6             Loop control variable in this 'for' statement, %s, is modified in the body of the loop.\\
MISRA-C:2004 Rule 13.06
2469   Min_Ctrl              Loop control variable in this 'for' statement, %s, is modified in the body of the loop.\\
MISRA-C:2004 Rule 13.06

2547   RULE005_2             This declaration of tag '%s' hides a more global declaration.\\
MISRA-C:2004 Rule 05.02
2547   Maj_Decl              This declaration of tag '%s' hides a more global declaration.\\
MISRA-C:2004 Rule 05.02

3001   RULE016_5             Function has been declared with an empty parameter list.\\
MISRA-C:2004 Rule 16.05	REFERENCE - ISO:C90-6.5.4.3 Function Declarators (Including Prototypes) - Semantics, ISO:C90-6.9.4 Future Language Directions
3001   Min_Func              Function has been declared with an empty parameter list.\\
MISRA-C:2004 Rule 16.05	REFERENCE - ISO:C90-6.5.4.3 Function Declarators (Including Prototypes) - Semantics, ISO:C90-6.9.4 Future Language Directions

3002   RULE008_1             Defining '%s()' with an identifier list and separate parameter declarations is an obsolescent feature.\\
MISRA-C:2004 Rule 08.01	REFERENCE - ISO:C90-6.9.5 Future Language Directions
3002   Maj_Func              Defining '%s()' with an identifier list and separate parameter declarations is an obsolescent feature.\\
MISRA-C:2004 Rule 08.01	REFERENCE - ISO:C90-6.9.5 Future Language Directions

3006   RULE002_1             This function contains a mixture of in-line assembler statements and C statements.\\
MISRA-C:2004 Rule 02.01
3006   Min_Func              This function contains a mixture of in-line assembler statements and C statements.\\
MISRA-C:2004 Rule 02.01

3007   RULE016_5             "void" has been omitted when defining a function with no parameters.\\
MISRA-C:2004 Rule 16.05	REFERENCE - ISO:C90-6.5.4.3 Function Declarators (Including Prototypes) - Semantics, ISO:C90-6.7.1 Function Definitions - Constraints
3007   Min_Func              "void" has been omitted when defining a function with no parameters.\\
MISRA-C:2004 Rule 16.05	REFERENCE - ISO:C90-6.5.4.3 Function Declarators (Including Prototypes) - Semantics, ISO:C90-6.7.1 Function Definitions - Constraints

3101   RULE012_9             Unary '-' applied to an operand of type unsigned int or unsigned long gives an unsigned result.\\
MISRA-C:2004 Rule 12.09	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators - Semantics
3101   Maj_Ops               Unary '-' applied to an operand of type unsigned int or unsigned long gives an unsigned result.\\
MISRA-C:2004 Rule 12.09	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators - Semantics

3102   RULE012_9             Unary '-' applied to an operand whose underlying type is unsigned.\\
MISRA-C:2004 Rule 12.09	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators - Semantics
3102   Maj_Ops               Unary '-' applied to an operand whose underlying type is unsigned.\\
MISRA-C:2004 Rule 12.09	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators - Semantics

3108   RULE002_3             Nested comments are not recognized in the ISO standard.\\
MISRA-C:2004 Rule 02.03	REFERENCE - ISO:C90-6.1.9 Comments (footnote 26)
3108   Min_Prepro            Nested comments are not recognized in the ISO standard.\\
MISRA-C:2004 Rule 02.03	REFERENCE - ISO:C90-6.1.9 Comments (footnote 26)

3110   RULE014_2             The left-hand operand of this ',' has no side effects.\\
MISRA-C:2004 Rule 14.02	REFERENCE - ISO:C90-6.6.3 Expression and Null Statements
3110   Maj_Redun             The left-hand operand of this ',' has no side effects.\\
MISRA-C:2004 Rule 14.02	REFERENCE - ISO:C90-6.6.3 Expression and Null Statements

3112   RULE014_2             This statement has no side-effect - it can be removed.\\
MISRA-C:2004 Rule 14.02
3112   Maj_Redun             This statement has no side-effect - it can be removed.\\
MISRA-C:2004 Rule 14.02

3113   RULE016_8             [U] 'return' statement includes no expression but function '%s()' is implicitly of type 'int'.\\
MISRA-C:2004 Rule 16.08	REFERENCE - ISO:C90-6.6.6.4 The return Statement - Semantics
3113   ISO_ExpU              [U] 'return' statement includes no expression but function '%s()' is implicitly of type 'int'.\\
MISRA-C:2004 Rule 16.08	REFERENCE - ISO:C90-6.6.6.4 The return Statement - Semantics

3114   RULE016_8             [U] Function '%s()' is implicitly of type 'int' but ends without returning a value.\\
MISRA-C:2004 Rule 16.08	REFERENCE - ISO:C90-6.6.6.4 The return Statement - Semantics
3114   ISO_ExpU              [U] Function '%s()' is implicitly of type 'int' but ends without returning a value.\\
MISRA-C:2004 Rule 16.08	REFERENCE - ISO:C90-6.6.6.4 The return Statement - Semantics

3115   RULE19_16             Unrecognized preprocessing directive has been ignored because of conditional inclusion directives.\\
MISRA-C:2004 Rule 19.16
3115   Min_Prepro            Unrecognized preprocessing directive has been ignored because of conditional inclusion directives.\\
MISRA-C:2004 Rule 19.16

3116   RULE003_4             Unrecognized #pragma arguments '%s' This #pragma directive has been ignored.\\
MISRA-C:2004 Rule 03.04	REFERENCE - ISO:C90-6.8.6 Pragma Directive
3116   Min_Prepro            Unrecognized #pragma arguments '%s' This #pragma directive has been ignored.\\
MISRA-C:2004 Rule 03.04	REFERENCE - ISO:C90-6.8.6 Pragma Directive

3138   RULE014_3             Null statement is located close to other code or comments.\\
MISRA-C:2004 Rule 14.03
3138   Min_Stmt              Null statement is located close to other code or comments.\\
MISRA-C:2004 Rule 14.03

3200   RULE16_10             '%s' returns a value which is not being used.\\
MISRA-C:2004 Rule 16.10
3200   Min_Func              '%s' returns a value which is not being used.\\
MISRA-C:2004 Rule 16.10

3201   RULE014_1             This statement is unreachable.\\
MISRA-C:2004 Rule 14.01
3201   Maj_Redun             This statement is unreachable.\\
MISRA-C:2004 Rule 14.01

3217   RULE017_6             Address of automatic object exported to a pointer with linkage or wider scope.\\
MISRA-C:2004 Rule 17.06	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects
3217   Maj_Ops               Address of automatic object exported to a pointer with linkage or wider scope.\\
MISRA-C:2004 Rule 17.06	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects

3218   RULE008_7             File scope static, '%s', is only accessed in one function.\\
MISRA-C:2004 Rule 08.07
3218   Min_Decl              File scope static, '%s', is only accessed in one function.\\
MISRA-C:2004 Rule 08.07

3219   RULE014_1             Static function '%s()' is not used within this translation unit.\\
MISRA-C:2004 Rule 14.01
3219   Maj_Redun             Static function '%s()' is not used within this translation unit.\\
MISRA-C:2004 Rule 14.01

3221   RULE008_6             Function with external linkage declared at block scope.\\
MISRA-C:2004 Rule 08.06
3221   Min_Decl              Function with external linkage declared at block scope.\\
MISRA-C:2004 Rule 08.06

3222   RULE008_8             Object with external linkage declared at block scope.\\
MISRA-C:2004 Rule 08.08
3222   Min_Decl              Object with external linkage declared at block scope.\\
MISRA-C:2004 Rule 08.08

3224   RULE08_11             This identifier has previously been declared with internal linkage but is not declared here with the static storage class specifier.\\
MISRA-C:2004 Rule 08.11
3224   Min_Decl              This identifier has previously been declared with internal linkage but is not declared here with the static storage class specifier.\\
MISRA-C:2004 Rule 08.11

3225   RULE017_6             Address of automatic object exported using a function parameter.\\
MISRA-C:2004 Rule 17.06	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects
3225   Maj_Ops               Address of automatic object exported using a function parameter.\\
MISRA-C:2004 Rule 17.06	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects

3230   RULE017_6             Address of automatic object assigned to local pointer with static storage duration.\\
MISRA-C:2004 Rule 17.06	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects
3230   Maj_Ops               Address of automatic object assigned to local pointer with static storage duration.\\
MISRA-C:2004 Rule 17.06	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects

3234   RULE015_0             Declarations precede the first label in this 'switch' construct.\\
MISRA-C:2004 Rule 15.00
3234   Min_Switch            Declarations precede the first label in this 'switch' construct.\\
MISRA-C:2004 Rule 15.00

3302   RULE12_11             Wraparound past zero in unsigned subtraction of constant operands.\\
MISRA-C:2004 Rule 12.11	REFERENCE - ISO:C90-6.1.2.5 Types
3302   Min_Const             Wraparound past zero in unsigned subtraction of constant operands.\\
MISRA-C:2004 Rule 12.11	REFERENCE - ISO:C90-6.1.2.5 Types

3303   RULE12_11             Wraparound past zero in unsigned addition of constant operands.\\
MISRA-C:2004 Rule 12.11	REFERENCE - ISO:C90-6.1.2.5 Types
3303   Min_Const             Wraparound past zero in unsigned addition of constant operands.\\
MISRA-C:2004 Rule 12.11	REFERENCE - ISO:C90-6.1.2.5 Types

3304   RULE12_11             Wraparound past zero in unsigned multiplication of constant operands.\\
MISRA-C:2004 Rule 12.11	REFERENCE - ISO:C90-6.1.2.5 Types
3304   Min_Const             Wraparound past zero in unsigned multiplication of constant operands.\\
MISRA-C:2004 Rule 12.11	REFERENCE - ISO:C90-6.1.2.5 Types

3306   RULE010_1             Truncation of positive constant integer value during implicit conversion to a smaller unsigned type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.2.1.2 Conversions, Signed and Unsigned Integers
3306   Maj_Ops               Truncation of positive constant integer value during implicit conversion to a smaller unsigned type.\\
MISRA-C:2004 Rule 10.01	REFERENCE - ISO:C90-6.2.1.2 Conversions, Signed and Unsigned Integers

3307   RULE012_3             The operand of 'sizeof' is an expression with implied side effects, but they will not be evaluated.\\
MISRA-C:2004 Rule 12.03	REFERENCE - ISO:C90-6.3.3.4 The sizeof Operator - Semantics
3307   Maj_Redun             The operand of 'sizeof' is an expression with implied side effects, but they will not be evaluated.\\
MISRA-C:2004 Rule 12.03	REFERENCE - ISO:C90-6.3.3.4 The sizeof Operator - Semantics

3311   RULE001_2             [u] An earlier jump to this statement will bypass the initialization of local variables.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects
3311   ISO_ImpU              [u] An earlier jump to this statement will bypass the initialization of local variables.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects

3312   RULE001_2             [u] This goto statement will jump into a previous block and bypass the initialization of local variables.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects
3312   ISO_ImpU              [u] This goto statement will jump into a previous block and bypass the initialization of local variables.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects

3313   RULE018_1             No definition has been found for structure/union tag '%s'.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.5.2.3 Tags
3313   Min_Decl              No definition has been found for structure/union tag '%s'.\\
MISRA-C:2004 Rule 18.01	REFERENCE - ISO:C90-6.5.2.3 Tags

3315   RULE015_5             This 'switch' statement contains only a single path - it is redundant.\\
MISRA-C:2004 Rule 15.05	REFERENCE - ISO:C90-6.6.4.2 The switch Statement
3315   Min_Switch            This 'switch' statement contains only a single path - it is redundant.\\
MISRA-C:2004 Rule 15.05	REFERENCE - ISO:C90-6.6.4.2 The switch Statement

3317   RULE19_17             '#if...' not matched by '#endif' in included file. This is probably an error.\\
MISRA-C:2004 Rule 19.17
3317   Maj_Prepro            '#if...' not matched by '#endif' in included file. This is probably an error.\\
MISRA-C:2004 Rule 19.17

3318   RULE19_17             '#else'/'#elif'/'#endif' in included file matched '#if...' in parent file. This is probably an error.\\
MISRA-C:2004 Rule 19.17
3318   Maj_Prepro            '#else'/'#elif'/'#endif' in included file matched '#if...' in parent file. This is probably an error.\\
MISRA-C:2004 Rule 19.17

3319   RULE016_6             [U] Function called with number of arguments which differs from number of parameters in definition.\\
MISRA-C:2004 Rule 16.06	REFERENCE - ISO:C90-6.3.2.2 Function Calls
3319   ISO_ExpU              [U] Function called with number of arguments which differs from number of parameters in definition.\\
MISRA-C:2004 Rule 16.06	REFERENCE - ISO:C90-6.3.2.2 Function Calls

3320   RULE008_3             Type of argument no. %s differs from its type in definition of function.\\
MISRA-C:2004 Rule 08.03	REFERENCE - ISO:C90-6.3.2.2 Function Calls
3320   Maj_Func              Type of argument no. %s differs from its type in definition of function.\\
MISRA-C:2004 Rule 08.03	REFERENCE - ISO:C90-6.3.2.2 Function Calls

3321   RULE009_1             [U] The variable '%s' is definitely unset at this point.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization
3321   ISO_ExpU              [U] The variable '%s' is definitely unset at this point.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization

3322   RULE012_6             Operand of a logical ! operator is a constant expression which is not a 'Boolean' value.\\
MISRA-C:2004 Rule 12.06
3322   Min_Ops               Operand of a logical ! operator is a constant expression which is not a 'Boolean' value.\\
MISRA-C:2004 Rule 12.06

3325   RULE014_1             This controlling expression has a constant 'false' value.\\
MISRA-C:2004 Rule 14.01
3325   Min_Ctrl              This controlling expression has a constant 'false' value.\\
MISRA-C:2004 Rule 14.01

3326   RULE013_1             The result of an assignment is being used in a logical operation.\\
MISRA-C:2004 Rule 13.01
3326   Min_Stmt              The result of an assignment is being used in a logical operation.\\
MISRA-C:2004 Rule 13.01

3332   RULE19_11             The macro '%s' used in this '#if' or '#elif' expression is not defined.\\
MISRA-C:2004 Rule 19.11
3332   Maj_Prepro            The macro '%s' used in this '#if' or '#elif' expression is not defined.\\
MISRA-C:2004 Rule 19.11

3334   RULE005_2             This declaration of '%s' hides a more global declaration.\\
MISRA-C:2004 Rule 05.02
3334   Maj_Decl              This declaration of '%s' hides a more global declaration.\\
MISRA-C:2004 Rule 05.02

3335   RULE008_1             No function declaration. Implicit declaration inserted: 'extern int %s();'.\\
MISRA-C:2004 Rule 08.01	REFERENCE - ISO:C90-6.3.2.2 Function Calls - Semantics
3335   Maj_Func              No function declaration. Implicit declaration inserted: 'extern int %s();'.\\
MISRA-C:2004 Rule 08.01	REFERENCE - ISO:C90-6.3.2.2 Function Calls - Semantics

3340   RULE013_4             Floating point variable used as 'for' loop control variable.\\
MISRA-C:2004 Rule 13.04
3340   Min_Ctrl              Floating point variable used as 'for' loop control variable.\\
MISRA-C:2004 Rule 13.04

3341   RULE013_3             Comparing floating point expressions for equality (with '==' or '!=').\\
MISRA-C:2004 Rule 13.03
3341   Maj_Ops               Comparing floating point expressions for equality (with '==' or '!=').\\
MISRA-C:2004 Rule 13.03

3342   RULE013_4             Controlling expression of 'for' loop is a floating point comparison.\\
MISRA-C:2004 Rule 13.04
3342   Min_Ctrl              Controlling expression of 'for' loop is a floating point comparison.\\
MISRA-C:2004 Rule 13.04

3344   RULE013_2             Controlling expression is not an 'effectively Boolean' expression.\\
MISRA-C:2004 Rule 13.02
3344   Min_Stmt              Controlling expression is not an 'effectively Boolean' expression.\\
MISRA-C:2004 Rule 13.02

3347   RULE009_1             [U] The variable '%s' is apparently unset at this point.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization
3347   ISO_ExpU              [U] The variable '%s' is apparently unset at this point.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization

3348   RULE009_1             Definite use of unset pointer as an argument to a function which expects a read-only pointer.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization
3348   Maj_Stmt              Definite use of unset pointer as an argument to a function which expects a read-only pointer.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization

3349   RULE009_1             Apparent use of unset pointer as an argument to a function which expects a read-only pointer.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization
3349   Maj_Stmt              Apparent use of unset pointer as an argument to a function which expects a read-only pointer.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization

3353   RULE009_1             The variable '%s' is possibly unset at this point.\\
MISRA-C:2004 Rule 09.01
3353   Min_Ctrl              The variable '%s' is possibly unset at this point.\\
MISRA-C:2004 Rule 09.01

3354   RULE009_1             Possible use of unset pointer as an argument to a function which expects a read-only pointer.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization
3354   Min_Ctrl              Possible use of unset pointer as an argument to a function which expects a read-only pointer.\\
MISRA-C:2004 Rule 09.01	REFERENCE - ISO:C90-6.5.7 Initialization

3355   RULE013_7             The result of this logical operation is always 'true'.\\
MISRA-C:2004 Rule 13.07
3355   Maj_Redun             The result of this logical operation is always 'true'.\\
MISRA-C:2004 Rule 13.07

3356   RULE013_7             The result of this logical operation is always 'false'.\\
MISRA-C:2004 Rule 13.07
3356   Maj_Redun             The result of this logical operation is always 'false'.\\
MISRA-C:2004 Rule 13.07

3357   RULE013_7             The value of this loop controlling expression is always 'true'.\\
MISRA-C:2004 Rule 13.07
3357   Maj_Redun             The value of this loop controlling expression is always 'true'.\\
MISRA-C:2004 Rule 13.07

3358   RULE013_7             The value of this 'if' controlling expression is always 'true'.\\
MISRA-C:2004 Rule 13.07
3358   Maj_Redun             The value of this 'if' controlling expression is always 'true'.\\
MISRA-C:2004 Rule 13.07

3359   RULE013_7             The value of this controlling expression is always 'false'.\\
MISRA-C:2004 Rule 13.07
3359   Maj_Redun             The value of this controlling expression is always 'false'.\\
MISRA-C:2004 Rule 13.07

3360   RULE013_7             The value of this 'do - while' controlling expression is always 'false'. The loop will only be executed once.\\
MISRA-C:2004 Rule 13.07
3360   Maj_Redun             The value of this 'do - while' controlling expression is always 'false'. The loop will only be executed once.\\
MISRA-C:2004 Rule 13.07

3372   RULE021_1             Definite wraparound past zero in an unsigned arithmetic operation.\\
MISRA-C:2004 Rule 21.01
3372   Maj_Ops               Definite wraparound past zero in an unsigned arithmetic operation.\\
MISRA-C:2004 Rule 21.01

3377   RULE012_6             Operand of a logical && or || operator is a constant expression which is not a 'Boolean' value.\\
MISRA-C:2004 Rule 12.06
3377   Min_Ops               Operand of a logical && or || operator is a constant expression which is not a 'Boolean' value.\\
MISRA-C:2004 Rule 12.06

3382   RULE021_1             Apparent wraparound past zero in an unsigned arithmetic operation.\\
MISRA-C:2004 Rule 21.01
3382   Maj_Ops               Apparent wraparound past zero in an unsigned arithmetic operation.\\
MISRA-C:2004 Rule 21.01

3389   RULE012_1             Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).\\
MISRA-C:2004 Rule 12.01
3389   Min_Stmt              Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).\\
MISRA-C:2004 Rule 12.01

3391   RULE012_1             Extra parentheses recommended. A conditional operation is the operand of another conditional operator.\\
MISRA-C:2004 Rule 12.01
3391   Min_Stmt              Extra parentheses recommended. A conditional operation is the operand of another conditional operator.\\
MISRA-C:2004 Rule 12.01

3392   RULE012_1             Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.\\
MISRA-C:2004 Rule 12.01
3392   Min_Stmt              Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.\\
MISRA-C:2004 Rule 12.01

3393   RULE012_1             Extra parentheses recommended. An arithmetic operation (* / + -) is the operand of a different operator with the same precedence.\\
MISRA-C:2004 Rule 12.01
3393   Min_Stmt              Extra parentheses recommended. An arithmetic operation (* / + -) is the operand of a different operator with the same precedence.\\
MISRA-C:2004 Rule 12.01

3394   RULE012_1             Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.\\
MISRA-C:2004 Rule 12.01
3394   Min_Stmt              Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.\\
MISRA-C:2004 Rule 12.01

3395   RULE012_1             Extra parentheses recommended. A * or / operation is the operand of a + or - operator.\\
MISRA-C:2004 Rule 12.01
3395   Min_Stmt              Extra parentheses recommended. A * or / operation is the operand of a + or - operator.\\
MISRA-C:2004 Rule 12.01

3396   RULE012_1             Extra parentheses recommended. A binary operation is the operand of a conditional operator.\\
MISRA-C:2004 Rule 12.01
3396   Min_Stmt              Extra parentheses recommended. A binary operation is the operand of a conditional operator.\\
MISRA-C:2004 Rule 12.01

3397   RULE012_1             Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.\\
MISRA-C:2004 Rule 12.01
3397   Min_Stmt              Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.\\
MISRA-C:2004 Rule 12.01

3398   RULE012_5             Extra parentheses recommended. A function call, array subscript, or member operation is the operand of a logical && or ||.\\
MISRA-C:2004 Rule 12.05
3398   Min_Stmt              Extra parentheses recommended. A function call, array subscript, or member operation is the operand of a logical && or ||.\\
MISRA-C:2004 Rule 12.05

3399   RULE012_5             Extra parentheses recommended. A unary operation is the operand of a logical && or ||.\\
MISRA-C:2004 Rule 12.05
3399   Min_Stmt              Extra parentheses recommended. A unary operation is the operand of a logical && or ||.\\
MISRA-C:2004 Rule 12.05

3400   RULE012_5             Extra parentheses recommended. A binary operation is the operand of a logical && or ||.\\
MISRA-C:2004 Rule 12.05
3400   Min_Stmt              Extra parentheses recommended. A binary operation is the operand of a logical && or ||.\\
MISRA-C:2004 Rule 12.05

3402   RULE014_9             Braces are needed to clarify the structure of this 'if'-'if'-'else' statement.\\
MISRA-C:2004 Rule 14.09	REFERENCE - ISO:C90-6.6.4.1 The if statement - Semantics
3402   Min_Brace             Braces are needed to clarify the structure of this 'if'-'if'-'else' statement.\\
MISRA-C:2004 Rule 14.09	REFERENCE - ISO:C90-6.6.4.1 The if statement - Semantics

3406   RULE008_5             Object/function '%s', with external linkage, has been defined in a header file.\\
MISRA-C:2004 Rule 08.05
3406   Maj_Decl              Object/function '%s', with external linkage, has been defined in a header file.\\
MISRA-C:2004 Rule 08.05

3408   RULE008_8             '%s' has external linkage and is being defined without any previous declaration.\\
MISRA-C:2004 Rule 08.08
3408   Min_Decl              '%s' has external linkage and is being defined without any previous declaration.\\
MISRA-C:2004 Rule 08.08

3409   RULE019_4             The replacement list of function-like macro '%s' is not enclosed in ().\\
MISRA-C:2004 Rule 19.04	REFERENCE - ISO:C90-6.8 Preprocessing Directives
3409   Min_Prepro            The replacement list of function-like macro '%s' is not enclosed in ().\\
MISRA-C:2004 Rule 19.04	REFERENCE - ISO:C90-6.8 Preprocessing Directives

3410   RULE19_10             Macro parameter not enclosed in ().\\
MISRA-C:2004 Rule 19.10
3410   Min_Prepro            Macro parameter not enclosed in ().\\
MISRA-C:2004 Rule 19.10

3411   RULE019_4             Macro defined with unbalanced brackets, parentheses or braces.\\
MISRA-C:2004 Rule 19.04
3411   Min_Prepro            Macro defined with unbalanced brackets, parentheses or braces.\\
MISRA-C:2004 Rule 19.04

3412   RULE019_4             Macro defines an unrecognized code-fragment.\\
MISRA-C:2004 Rule 19.04
3412   Min_Prepro            Macro defines an unrecognized code-fragment.\\
MISRA-C:2004 Rule 19.04

3413   RULE019_4             Macro definition could be replaced by a typedef.\\
MISRA-C:2004 Rule 19.04	REFERENCE - ISO:C90-6.5.6 Type Definitions
3413   Min_Prepro            Macro definition could be replaced by a typedef.\\
MISRA-C:2004 Rule 19.04	REFERENCE - ISO:C90-6.5.6 Type Definitions

3415   RULE012_4             Right hand operand of '&&' or '||' is an expression with possible side effects.\\
MISRA-C:2004 Rule 12.04	REFERENCE - ISO:C90-5,1,2,3 Program Execution
3415   Min_Stmt              Right hand operand of '&&' or '||' is an expression with possible side effects.\\
MISRA-C:2004 Rule 12.04	REFERENCE - ISO:C90-5,1,2,3 Program Execution

3417   RULE12_10             The comma operator has been used outside a 'for' statement.\\
MISRA-C:2004 Rule 12.10
3417   Min_Ops               The comma operator has been used outside a 'for' statement.\\
MISRA-C:2004 Rule 12.10

3418   RULE12_10             The comma operator has been used in a 'for' statement.\\
MISRA-C:2004 Rule 12.10
3418   Min_Ops               The comma operator has been used in a 'for' statement.\\
MISRA-C:2004 Rule 12.10

3425   RULE014_2             One branch of this conditional operation is a redundant expression.\\
MISRA-C:2004 Rule 14.02
3425   Maj_Redun             One branch of this conditional operation is a redundant expression.\\
MISRA-C:2004 Rule 14.02

3426   RULE014_2             Right hand side of comma expression has no side effect and its value is not used.\\
MISRA-C:2004 Rule 14.02
3426   Maj_Redun             Right hand side of comma expression has no side effect and its value is not used.\\
MISRA-C:2004 Rule 14.02

3427   RULE014_2             Right hand side of logical operator has no side effect and its value is not used.\\
MISRA-C:2004 Rule 14.02
3427   Maj_Redun             Right hand side of logical operator has no side effect and its value is not used.\\
MISRA-C:2004 Rule 14.02

3431   RULE019_4             Macro defines an operator, a punctuator or a control statement keyword,\\
MISRA-C:2004 Rule 19.04
3431   Min_Prepro            Macro defines an operator, a punctuator or a control statement keyword,\\
MISRA-C:2004 Rule 19.04

3437   RULE001_2             [u] The assert macro has been suppressed to call a function of that name.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.2 Diagnostics <assert.h>
3437   ISO_ImpU              [u] The assert macro has been suppressed to call a function of that name.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.2 Diagnostics <assert.h>

3438   RULE001_2             [U] #undef'ing the assert macro to call a function of that name causes undefined behaviour.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.2 Diagnostics <assert.h>
3438   ISO_ExpU              [U] #undef'ing the assert macro to call a function of that name causes undefined behaviour.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-7.2 Diagnostics <assert.h>

3439   RULE020_1             Macro redefines a keyword.\\
MISRA-C:2004 Rule 20.01
3439   Min_Prepro            Macro redefines a keyword.\\
MISRA-C:2004 Rule 20.01

3440   RULE12_13             Using the value resulting from a ++ or -- operation.\\
MISRA-C:2004 Rule 12.13	REFERENCE - ISO:C90-6.3.2.4 Postfix Increment and Decrement Operators, ISO:C90-6.3.3.1 Prefix Increment and Decrement Operators
3440   Min_Ops               Using the value resulting from a ++ or -- operation.\\
MISRA-C:2004 Rule 12.13	REFERENCE - ISO:C90-6.3.2.4 Postfix Increment and Decrement Operators, ISO:C90-6.3.3.1 Prefix Increment and Decrement Operators

3447   RULE008_8             '%s' is being declared with external linkage but this declaration is not in a header file.\\
MISRA-C:2004 Rule 08.08
3447   Min_Decl              '%s' is being declared with external linkage but this declaration is not in a header file.\\
MISRA-C:2004 Rule 08.08

3448   RULE005_3             Declaration of typedef '%s' is not in a header file although it is used in a definition or declaration with external linkage.\\
MISRA-C:2004 Rule 05.03
3448   Min_Decl              Declaration of typedef '%s' is not in a header file although it is used in a definition or declaration with external linkage.\\
MISRA-C:2004 Rule 05.03

3450   RULE008_1             Function '%s', with internal linkage, is being defined without a previous declaration.\\
MISRA-C:2004 Rule 08.01
3450   Min_Decl              Function '%s', with internal linkage, is being defined without a previous declaration.\\
MISRA-C:2004 Rule 08.01

3451   RULE008_8             The global identifier '%s' has been declared in more than one file.\\
MISRA-C:2004 Rule 08.08
3451   Min_Decl              The global identifier '%s' has been declared in more than one file.\\
MISRA-C:2004 Rule 08.08

3452   RULE019_4             The replacement list of object-like macro '%s' is not enclosed in ().\\
MISRA-C:2004 Rule 19.04
3452   Min_Prepro            The replacement list of object-like macro '%s' is not enclosed in ().\\
MISRA-C:2004 Rule 19.04

3453   RULE019_7             A function could probably be used instead of this function-like macro.\\
MISRA-C:2004 Rule 19.07
3453   Min_Prepro            A function could probably be used instead of this function-like macro.\\
MISRA-C:2004 Rule 19.07

3458   RULE019_4             Macro defines a braced code statement block.\\
MISRA-C:2004 Rule 19.04
3458   Min_Prepro            Macro defines a braced code statement block.\\
MISRA-C:2004 Rule 19.04

3460   RULE019_4             Macro defines a type specifier keyword.\\
MISRA-C:2004 Rule 19.04
3460   Min_Prepro            Macro defines a type specifier keyword.\\
MISRA-C:2004 Rule 19.04

3461   RULE019_4             Macro defines a storage-class specifier/type qualifier sequence.\\
MISRA-C:2004 Rule 19.04
3461   Min_Prepro            Macro defines a storage-class specifier/type qualifier sequence.\\
MISRA-C:2004 Rule 19.04

3480   RULE008_5             Object/function '%s', with internal linkage, has been defined in a header file.\\
MISRA-C:2004 Rule 08.05
3480   Maj_Decl              Object/function '%s', with internal linkage, has been defined in a header file.\\
MISRA-C:2004 Rule 08.05

3601   RULE004_2             Trigraphs (??x) are an ISO feature.\\
MISRA-C:2004 Rule 04.02	REFERENCE - ISO:C90-5.2.1.1 Trigraph Sequences
3601   Min_Const             Trigraphs (??x) are an ISO feature.\\
MISRA-C:2004 Rule 04.02	REFERENCE - ISO:C90-5.2.1.1 Trigraph Sequences

3610   RULE004_1             Hexadecimal escape sequence used.\\
MISRA-C:2004 Rule 04.01
3610   Min_Const             Hexadecimal escape sequence used.\\
MISRA-C:2004 Rule 04.01

3628   RULE007_1             Octal escape sequences used in a character constant or string literal.\\
MISRA-C:2004 Rule 07.01
3628   Min_Const             Octal escape sequences used in a character constant or string literal.\\
MISRA-C:2004 Rule 07.01

3629   RULE12_12             Union contains member of floating type.\\
MISRA-C:2004 Rule 12.12
3629   Min_Decl              Union contains member of floating type.\\
MISRA-C:2004 Rule 12.12

3635   RULE016_9             Function identifier used as a pointer without a preceding & operator.\\
MISRA-C:2004 Rule 16.09	REFERENCE - ISO:C90-6.2,2,1 Lvalues and Function Designators
3635   Min_Func              Function identifier used as a pointer without a preceding & operator.\\
MISRA-C:2004 Rule 16.09	REFERENCE - ISO:C90-6.2,2,1 Lvalues and Function Designators

3659   RULE006_5             Unnamed zero-width bit-field declared with a signed type.\\
MISRA-C:2004 Rule 06.05	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics
3659   Min_Array             Unnamed zero-width bit-field declared with a signed type.\\
MISRA-C:2004 Rule 06.05	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics

3660   RULE006_5             Named bit-field consisting of a single bit declared with a signed type.\\
MISRA-C:2004 Rule 06.05	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics
3660   Min_Array             Named bit-field consisting of a single bit declared with a signed type.\\
MISRA-C:2004 Rule 06.05	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics

3664   RULE001_1             [E] Using a dot operator to access an individual bit is a language extension.\\
MISRA-C:2004 Rule 01.01
3664   Lang_ext              [E] Using a dot operator to access an individual bit is a language extension.\\
MISRA-C:2004 Rule 01.01

3665   RULE006_5             Unnamed bit-field consisting of a single bit declared with a signed type.\\
MISRA-C:2004 Rule 06.05	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics
3665   Min_Array             Unnamed bit-field consisting of a single bit declared with a signed type.\\
MISRA-C:2004 Rule 06.05	REFERENCE - ISO:C90-6.5.2.1 Structure and Union Specifiers - Semantics

3670   RULE016_2             Recursive call to function containing this call.\\
MISRA-C:2004 Rule 16.02
3670   Maj_Func              Recursive call to function containing this call.\\
MISRA-C:2004 Rule 16.02

3673   RULE016_7             The object addressed by the pointer parameter '%s' is not modified and so the pointer could be of type 'pointer to const'.\\
MISRA-C:2004 Rule 16.07
3673   Min_Decl              The object addressed by the pointer parameter '%s' is not modified and so the pointer could be of type 'pointer to const'.\\
MISRA-C:2004 Rule 16.07

3675   RULE008_3             Function parameter declared with type qualification which differs from previous declaration.\\
MISRA-C:2004 Rule 08.03
3675   Min_Func              Function parameter declared with type qualification which differs from previous declaration.\\
MISRA-C:2004 Rule 08.03

3680   RULE001_2             [U] Access outside bounds of array using a constant array subscript.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics
3680   ISO_ExpU              [U] Access outside bounds of array using a constant array subscript.\\
MISRA-C:2004 Rule 01.02	REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics

3684   RULE08_12             Array declared with unknown size.\\
MISRA-C:2004 Rule 08.12
3684   Min_Array             Array declared with unknown size.\\
MISRA-C:2004 Rule 08.12

3685   RULE021_1             [U] Definite access outside bounds of array.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics
3685   ISO_ExpU              [U] Definite access outside bounds of array.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics

3689   RULE021_1             [U] Apparent access outside bounds of array.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics
3689   ISO_ExpU              [U] Apparent access outside bounds of array.\\
MISRA-C:2004 Rule 21.01	REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics

3700   RULE006_2             Implicit conversion: char to signed char.\\
MISRA-C:2004 Rule 06.02
3700   Maj_Pchar             Implicit conversion: char to signed char.\\
MISRA-C:2004 Rule 06.02

3701   RULE006_2             Implicit conversion: char to unsigned char.\\
MISRA-C:2004 Rule 06.02
3701   Maj_Pchar             Implicit conversion: char to unsigned char.\\
MISRA-C:2004 Rule 06.02

3702   RULE003_1             Implicit conversion: char to short.\\
MISRA-C:2004 Rule 03.01
3702   Maj_Pchar             Implicit conversion: char to short.\\
MISRA-C:2004 Rule 03.01

3703   RULE003_1             Implicit conversion: char to unsigned short.\\
MISRA-C:2004 Rule 03.01
3703   Maj_Pchar             Implicit conversion: char to unsigned short.\\
MISRA-C:2004 Rule 03.01

3704   RULE003_1             Implicit conversion: char to int.\\
MISRA-C:2004 Rule 03.01
3704   Maj_Pchar             Implicit conversion: char to int.\\
MISRA-C:2004 Rule 03.01

3705   RULE003_1             Implicit conversion: char to unsigned int.\\
MISRA-C:2004 Rule 03.01
3705   Maj_Pchar             Implicit conversion: char to unsigned int.\\
MISRA-C:2004 Rule 03.01

3706   RULE003_1             Implicit conversion: char to long.\\
MISRA-C:2004 Rule 03.01
3706   Maj_Pchar             Implicit conversion: char to long.\\
MISRA-C:2004 Rule 03.01

3707   RULE003_1             Implicit conversion: char to unsigned long.\\
MISRA-C:2004 Rule 03.01
3707   Maj_Pchar             Implicit conversion: char to unsigned long.\\
MISRA-C:2004 Rule 03.01

3708   RULE010_1             Implicit conversion: char to float.\\
MISRA-C:2004 Rule 10.01
3708   Maj_Pchar             Implicit conversion: char to float.\\
MISRA-C:2004 Rule 10.01

3709   RULE010_1             Implicit conversion: char to double.\\
MISRA-C:2004 Rule 10.01
3709   Maj_Pchar             Implicit conversion: char to double.\\
MISRA-C:2004 Rule 10.01

3710   RULE010_1             Implicit conversion: char to long double.\\
MISRA-C:2004 Rule 10.01
3710   Maj_Pchar             Implicit conversion: char to long double.\\
MISRA-C:2004 Rule 10.01

3711   RULE006_1             Implicit conversion: unsigned char to char.\\
MISRA-C:2004 Rule 06.01
3711   Maj_Pchar             Implicit conversion: unsigned char to char.\\
MISRA-C:2004 Rule 06.01

3712   RULE010_1             Implicit conversion: unsigned char to signed char.\\
MISRA-C:2004 Rule 10.01
3712   Maj_UStoS             Implicit conversion: unsigned char to signed char.\\
MISRA-C:2004 Rule 10.01

3713   RULE010_1             Implicit conversion: unsigned char to short.\\
MISRA-C:2004 Rule 10.01
3713   Maj_UStoLS            Implicit conversion: unsigned char to short.\\
MISRA-C:2004 Rule 10.01

3715   RULE010_1             Implicit conversion: unsigned char to int.\\
MISRA-C:2004 Rule 10.01
3715   Maj_UStoLS            Implicit conversion: unsigned char to int.\\
MISRA-C:2004 Rule 10.01

3717   RULE010_1             Implicit conversion: unsigned char to long.\\
MISRA-C:2004 Rule 10.01
3717   Maj_UStoLS            Implicit conversion: unsigned char to long.\\
MISRA-C:2004 Rule 10.01

3719   RULE010_1             Implicit conversion: unsigned char to float.\\
MISRA-C:2004 Rule 10.01
3719   Maj_ItoFL             Implicit conversion: unsigned char to float.\\
MISRA-C:2004 Rule 10.01

3720   RULE010_1             Implicit conversion: unsigned char to double.\\
MISRA-C:2004 Rule 10.01
3720   Maj_ItoFL             Implicit conversion: unsigned char to double.\\
MISRA-C:2004 Rule 10.01

3721   RULE010_1             Implicit conversion: unsigned char to long double.\\
MISRA-C:2004 Rule 10.01
3721   Maj_ItoFL             Implicit conversion: unsigned char to long double.\\
MISRA-C:2004 Rule 10.01

3722   RULE006_1             Implicit conversion: signed char to char.\\
MISRA-C:2004 Rule 06.01
3722   Maj_Pchar             Implicit conversion: signed char to char.\\
MISRA-C:2004 Rule 06.01

3723   RULE010_1             Implicit conversion: signed char to unsigned char.\\
MISRA-C:2004 Rule 10.01
3723   Maj_StoUS             Implicit conversion: signed char to unsigned char.\\
MISRA-C:2004 Rule 10.01

3725   RULE010_1             Implicit conversion: signed char to unsigned short.\\
MISRA-C:2004 Rule 10.01
3725   Maj_StoUS             Implicit conversion: signed char to unsigned short.\\
MISRA-C:2004 Rule 10.01

3727   RULE010_1             Implicit conversion: signed char to unsigned int.\\
MISRA-C:2004 Rule 10.01
3727   Maj_StoUS             Implicit conversion: signed char to unsigned int.\\
MISRA-C:2004 Rule 10.01

3729   RULE010_1             Implicit conversion: signed char to unsigned long.\\
MISRA-C:2004 Rule 10.01
3729   Maj_StoUS             Implicit conversion: signed char to unsigned long.\\
MISRA-C:2004 Rule 10.01

3730   RULE010_1             Implicit conversion: signed char to float.\\
MISRA-C:2004 Rule 10.01
3730   Maj_ItoFL             Implicit conversion: signed char to float.\\
MISRA-C:2004 Rule 10.01

3731   RULE010_1             Implicit conversion: signed char to double.\\
MISRA-C:2004 Rule 10.01
3731   Maj_ItoFL             Implicit conversion: signed char to double.\\
MISRA-C:2004 Rule 10.01

3732   RULE010_1             Implicit conversion: signed char to long double.\\
MISRA-C:2004 Rule 10.01
3732   Maj_ItoFL             Implicit conversion: signed char to long double.\\
MISRA-C:2004 Rule 10.01

3733   RULE006_1             Implicit conversion: short to char.\\
MISRA-C:2004 Rule 06.01
3733   Maj_Pchar             Implicit conversion: short to char.\\
MISRA-C:2004 Rule 06.01

3734   RULE010_1             Implicit conversion: short to signed char.\\
MISRA-C:2004 Rule 10.01
3734   Maj_Small             Implicit conversion: short to signed char.\\
MISRA-C:2004 Rule 10.01

3735   RULE010_1             Implicit conversion: short to unsigned char.\\
MISRA-C:2004 Rule 10.01
3735   Maj_StoUS             Implicit conversion: short to unsigned char.\\
MISRA-C:2004 Rule 10.01

3736   RULE010_1             Implicit conversion: short to unsigned short.\\
MISRA-C:2004 Rule 10.01
3736   Maj_StoUS             Implicit conversion: short to unsigned short.\\
MISRA-C:2004 Rule 10.01

3738   RULE010_1             Implicit conversion: short to unsigned int.\\
MISRA-C:2004 Rule 10.01
3738   Maj_StoUS             Implicit conversion: short to unsigned int.\\
MISRA-C:2004 Rule 10.01

3740   RULE010_1             Implicit conversion: short to unsigned long.\\
MISRA-C:2004 Rule 10.01
3740   Maj_StoUS             Implicit conversion: short to unsigned long.\\
MISRA-C:2004 Rule 10.01

3741   RULE010_1             Implicit conversion: short to float.\\
MISRA-C:2004 Rule 10.01
3741   Maj_ItoFL             Implicit conversion: short to float.\\
MISRA-C:2004 Rule 10.01

3742   RULE010_1             Implicit conversion: short to double.\\
MISRA-C:2004 Rule 10.01
3742   Maj_ItoFL             Implicit conversion: short to double.\\
MISRA-C:2004 Rule 10.01

3743   RULE010_1             Implicit conversion: short to long double.\\
MISRA-C:2004 Rule 10.01
3743   Maj_ItoFL             Implicit conversion: short to long double.\\
MISRA-C:2004 Rule 10.01

3744   RULE006_1             Implicit conversion: unsigned short to char.\\
MISRA-C:2004 Rule 06.01
3744   Maj_Pchar             Implicit conversion: unsigned short to char.\\
MISRA-C:2004 Rule 06.01

3745   RULE010_1             Implicit conversion: unsigned short to signed char.\\
MISRA-C:2004 Rule 10.01
3745   Maj_UStoS             Implicit conversion: unsigned short to signed char.\\
MISRA-C:2004 Rule 10.01

3746   RULE010_1             Implicit conversion: unsigned short to unsigned char.\\
MISRA-C:2004 Rule 10.01
3746   Maj_Small             Implicit conversion: unsigned short to unsigned char.\\
MISRA-C:2004 Rule 10.01

3747   RULE010_1             Implicit conversion: unsigned short to short.\\
MISRA-C:2004 Rule 10.01
3747   Maj_UStoS             Implicit conversion: unsigned short to short.\\
MISRA-C:2004 Rule 10.01

3748   RULE010_1             Implicit conversion: unsigned short to int.\\
MISRA-C:2004 Rule 10.01
3748   Maj_UStoLS            Implicit conversion: unsigned short to int.\\
MISRA-C:2004 Rule 10.01

3750   RULE010_1             Implicit conversion: unsigned short to long.\\
MISRA-C:2004 Rule 10.01
3750   Maj_UStoLS            Implicit conversion: unsigned short to long.\\
MISRA-C:2004 Rule 10.01

3752   RULE010_1             Implicit conversion: unsigned short to float.\\
MISRA-C:2004 Rule 10.01
3752   Maj_ItoFL             Implicit conversion: unsigned short to float.\\
MISRA-C:2004 Rule 10.01

3753   RULE010_1             Implicit conversion: unsigned short to double.\\
MISRA-C:2004 Rule 10.01
3753   Maj_ItoFL             Implicit conversion: unsigned short to double.\\
MISRA-C:2004 Rule 10.01

3754   RULE010_1             Implicit conversion: unsigned short to long double.\\
MISRA-C:2004 Rule 10.01
3754   Maj_ItoFL             Implicit conversion: unsigned short to long double.\\
MISRA-C:2004 Rule 10.01

3755   RULE006_1             Implicit conversion: int to char.\\
MISRA-C:2004 Rule 06.01
3755   Maj_Pchar             Implicit conversion: int to char.\\
MISRA-C:2004 Rule 06.01

3756   RULE010_1             Implicit conversion: int to signed char.\\
MISRA-C:2004 Rule 10.01
3756   Maj_Small             Implicit conversion: int to signed char.\\
MISRA-C:2004 Rule 10.01

3757   RULE010_1             Implicit conversion: int to unsigned char.\\
MISRA-C:2004 Rule 10.01
3757   Maj_StoUS             Implicit conversion: int to unsigned char.\\
MISRA-C:2004 Rule 10.01

3758   RULE010_1             Implicit conversion: int to short.\\
MISRA-C:2004 Rule 10.01
3758   Maj_Small             Implicit conversion: int to short.\\
MISRA-C:2004 Rule 10.01

3759   RULE010_1             Implicit conversion: int to unsigned short.\\
MISRA-C:2004 Rule 10.01
3759   Maj_StoUS             Implicit conversion: int to unsigned short.\\
MISRA-C:2004 Rule 10.01

3760   RULE010_1             Implicit conversion: int to unsigned int.\\
MISRA-C:2004 Rule 10.01
3760   Maj_StoUS             Implicit conversion: int to unsigned int.\\
MISRA-C:2004 Rule 10.01

3762   RULE010_1             Implicit conversion: int to unsigned long.\\
MISRA-C:2004 Rule 10.01
3762   Maj_StoUS             Implicit conversion: int to unsigned long.\\
MISRA-C:2004 Rule 10.01

3763   RULE010_1             Implicit conversion: int to float.\\
MISRA-C:2004 Rule 10.01
3763   Maj_ItoFL             Implicit conversion: int to float.\\
MISRA-C:2004 Rule 10.01

3764   RULE010_1             Implicit conversion: int to double.\\
MISRA-C:2004 Rule 10.01
3764   Maj_ItoFL             Implicit conversion: int to double.\\
MISRA-C:2004 Rule 10.01

3765   RULE010_1             Implicit conversion: int to long double.\\
MISRA-C:2004 Rule 10.01
3765   Maj_ItoFL             Implicit conversion: int to long double.\\
MISRA-C:2004 Rule 10.01

3766   RULE006_1             Implicit conversion: unsigned int to char.\\
MISRA-C:2004 Rule 06.01
3766   Maj_Pchar             Implicit conversion: unsigned int to char.\\
MISRA-C:2004 Rule 06.01

3767   RULE010_1             Implicit conversion: unsigned int to signed char.\\
MISRA-C:2004 Rule 10.01
3767   Maj_UStoS             Implicit conversion: unsigned int to signed char.\\
MISRA-C:2004 Rule 10.01

3768   RULE010_1             Implicit conversion: unsigned int to unsigned char.\\
MISRA-C:2004 Rule 10.01
3768   Maj_Small             Implicit conversion: unsigned int to unsigned char.\\
MISRA-C:2004 Rule 10.01

3769   RULE010_1             Implicit conversion: unsigned int to short.\\
MISRA-C:2004 Rule 10.01
3769   Maj_UStoS             Implicit conversion: unsigned int to short.\\
MISRA-C:2004 Rule 10.01

3770   RULE010_1             Implicit conversion: unsigned int to unsigned short.\\
MISRA-C:2004 Rule 10.01
3770   Maj_Small             Implicit conversion: unsigned int to unsigned short.\\
MISRA-C:2004 Rule 10.01

3771   RULE010_1             Implicit conversion: unsigned int to int.\\
MISRA-C:2004 Rule 10.01
3771   Maj_UStoS             Implicit conversion: unsigned int to int.\\
MISRA-C:2004 Rule 10.01

3772   RULE010_1             Implicit conversion: unsigned int to long.\\
MISRA-C:2004 Rule 10.01
3772   Maj_UStoLS            Implicit conversion: unsigned int to long.\\
MISRA-C:2004 Rule 10.01

3774   RULE010_1             Implicit conversion: unsigned int to float.\\
MISRA-C:2004 Rule 10.01
3774   Maj_ItoFL             Implicit conversion: unsigned int to float.\\
MISRA-C:2004 Rule 10.01

3775   RULE010_1             Implicit conversion: unsigned int to double.\\
MISRA-C:2004 Rule 10.01
3775   Maj_ItoFL             Implicit conversion: unsigned int to double.\\
MISRA-C:2004 Rule 10.01

3776   RULE010_1             Implicit conversion: unsigned int to long double.\\
MISRA-C:2004 Rule 10.01
3776   Maj_ItoFL             Implicit conversion: unsigned int to long double.\\
MISRA-C:2004 Rule 10.01

3777   RULE006_1             Implicit conversion: long to char.\\
MISRA-C:2004 Rule 06.01
3777   Maj_Pchar             Implicit conversion: long to char.\\
MISRA-C:2004 Rule 06.01

3778   RULE010_1             Implicit conversion: long to signed char.\\
MISRA-C:2004 Rule 10.01
3778   Maj_Small             Implicit conversion: long to signed char.\\
MISRA-C:2004 Rule 10.01

3779   RULE010_1             Implicit conversion: long to unsigned char.\\
MISRA-C:2004 Rule 10.01
3779   Maj_StoUS             Implicit conversion: long to unsigned char.\\
MISRA-C:2004 Rule 10.01

3780   RULE010_1             Implicit conversion: long to short.\\
MISRA-C:2004 Rule 10.01
3780   Maj_Small             Implicit conversion: long to short.\\
MISRA-C:2004 Rule 10.01

3781   RULE010_1             Implicit conversion: long to unsigned short.\\
MISRA-C:2004 Rule 10.01
3781   Maj_StoUS             Implicit conversion: long to unsigned short.\\
MISRA-C:2004 Rule 10.01

3782   RULE010_1             Implicit conversion: long to int.\\
MISRA-C:2004 Rule 10.01
3782   Maj_Small             Implicit conversion: long to int.\\
MISRA-C:2004 Rule 10.01

3783   RULE010_1             Implicit conversion: long to unsigned int.\\
MISRA-C:2004 Rule 10.01
3783   Maj_StoUS             Implicit conversion: long to unsigned int.\\
MISRA-C:2004 Rule 10.01

3784   RULE010_1             Implicit conversion: long to unsigned long.\\
MISRA-C:2004 Rule 10.01
3784   Maj_StoUS             Implicit conversion: long to unsigned long.\\
MISRA-C:2004 Rule 10.01

3785   RULE010_1             Implicit conversion: long to float.\\
MISRA-C:2004 Rule 10.01
3785   Maj_ItoFL             Implicit conversion: long to float.\\
MISRA-C:2004 Rule 10.01

3786   RULE010_1             Implicit conversion: long to double.\\
MISRA-C:2004 Rule 10.01
3786   Maj_ItoFL             Implicit conversion: long to double.\\
MISRA-C:2004 Rule 10.01

3787   RULE010_1             Implicit conversion: long to long double.\\
MISRA-C:2004 Rule 10.01
3787   Maj_ItoFL             Implicit conversion: long to long double.\\
MISRA-C:2004 Rule 10.01

3788   RULE006_1             Implicit conversion: unsigned long to char.\\
MISRA-C:2004 Rule 06.01
3788   Maj_Pchar             Implicit conversion: unsigned long to char.\\
MISRA-C:2004 Rule 06.01

3789   RULE010_1             Implicit conversion: unsigned long to signed char.\\
MISRA-C:2004 Rule 10.01
3789   Maj_UStoS             Implicit conversion: unsigned long to signed char.\\
MISRA-C:2004 Rule 10.01

3790   RULE010_1             Implicit conversion: unsigned long to unsigned char.\\
MISRA-C:2004 Rule 10.01
3790   Maj_Small             Implicit conversion: unsigned long to unsigned char.\\
MISRA-C:2004 Rule 10.01

3791   RULE010_1             Implicit conversion: unsigned long to short.\\
MISRA-C:2004 Rule 10.01
3791   Maj_UStoS             Implicit conversion: unsigned long to short.\\
MISRA-C:2004 Rule 10.01

3792   RULE010_1             Implicit conversion: unsigned long to unsigned short.\\
MISRA-C:2004 Rule 10.01
3792   Maj_Small             Implicit conversion: unsigned long to unsigned short.\\
MISRA-C:2004 Rule 10.01

3793   RULE010_1             Implicit conversion: unsigned long to int.\\
MISRA-C:2004 Rule 10.01
3793   Maj_UStoS             Implicit conversion: unsigned long to int.\\
MISRA-C:2004 Rule 10.01

3794   RULE010_1             Implicit conversion: unsigned long to unsigned int.\\
MISRA-C:2004 Rule 10.01
3794   Maj_Small             Implicit conversion: unsigned long to unsigned int.\\
MISRA-C:2004 Rule 10.01

3795   RULE010_1             Implicit conversion: unsigned long to long.\\
MISRA-C:2004 Rule 10.01
3795   Maj_UStoS             Implicit conversion: unsigned long to long.\\
MISRA-C:2004 Rule 10.01

3796   RULE010_1             Implicit conversion: unsigned long to float.\\
MISRA-C:2004 Rule 10.01
3796   Maj_ItoFL             Implicit conversion: unsigned long to float.\\
MISRA-C:2004 Rule 10.01

3797   RULE010_1             Implicit conversion: unsigned long to double.\\
MISRA-C:2004 Rule 10.01
3797   Maj_ItoFL             Implicit conversion: unsigned long to double.\\
MISRA-C:2004 Rule 10.01

3798   RULE010_1             Implicit conversion: unsigned long to long double.\\
MISRA-C:2004 Rule 10.01
3798   Maj_ItoFL             Implicit conversion: unsigned long to long double.\\
MISRA-C:2004 Rule 10.01

3799   RULE010_2             Implicit conversion: float to char.\\
MISRA-C:2004 Rule 10.02
3799   Maj_FLtoI             Implicit conversion: float to char.\\
MISRA-C:2004 Rule 10.02

3800   RULE010_2             Implicit conversion: float to signed char.\\
MISRA-C:2004 Rule 10.02
3800   Maj_FLtoI             Implicit conversion: float to signed char.\\
MISRA-C:2004 Rule 10.02

3801   RULE010_2             Implicit conversion: float to unsigned char.\\
MISRA-C:2004 Rule 10.02
3801   Maj_FLtoI             Implicit conversion: float to unsigned char.\\
MISRA-C:2004 Rule 10.02

3802   RULE010_2             Implicit conversion: float to short.\\
MISRA-C:2004 Rule 10.02
3802   Maj_FLtoI             Implicit conversion: float to short.\\
MISRA-C:2004 Rule 10.02

3803   RULE010_2             Implicit conversion: float to unsigned short.\\
MISRA-C:2004 Rule 10.02
3803   Maj_FLtoI             Implicit conversion: float to unsigned short.\\
MISRA-C:2004 Rule 10.02

3804   RULE010_2             Implicit conversion: float to int.\\
MISRA-C:2004 Rule 10.02
3804   Maj_FLtoI             Implicit conversion: float to int.\\
MISRA-C:2004 Rule 10.02

3805   RULE010_2             Implicit conversion: float to unsigned int.\\
MISRA-C:2004 Rule 10.02
3805   Maj_FLtoI             Implicit conversion: float to unsigned int.\\
MISRA-C:2004 Rule 10.02

3806   RULE010_2             Implicit conversion: float to long.\\
MISRA-C:2004 Rule 10.02
3806   Maj_FLtoI             Implicit conversion: float to long.\\
MISRA-C:2004 Rule 10.02

3807   RULE010_2             Implicit conversion: float to unsigned long.\\
MISRA-C:2004 Rule 10.02
3807   Maj_FLtoI             Implicit conversion: float to unsigned long.\\
MISRA-C:2004 Rule 10.02

3810   RULE010_2             Implicit conversion: double to char.\\
MISRA-C:2004 Rule 10.02
3810   Maj_FLtoI             Implicit conversion: double to char.\\
MISRA-C:2004 Rule 10.02

3811   RULE010_2             Implicit conversion: double to signed char.\\
MISRA-C:2004 Rule 10.02
3811   Maj_FLtoI             Implicit conversion: double to signed char.\\
MISRA-C:2004 Rule 10.02

3812   RULE010_2             Implicit conversion: double to unsigned char.\\
MISRA-C:2004 Rule 10.02
3812   Maj_FLtoI             Implicit conversion: double to unsigned char.\\
MISRA-C:2004 Rule 10.02

3813   RULE010_2             Implicit conversion: double to short.\\
MISRA-C:2004 Rule 10.02
3813   Maj_FLtoI             Implicit conversion: double to short.\\
MISRA-C:2004 Rule 10.02

3814   RULE010_2             Implicit conversion: double to unsigned short.\\
MISRA-C:2004 Rule 10.02
3814   Maj_FLtoI             Implicit conversion: double to unsigned short.\\
MISRA-C:2004 Rule 10.02

3815   RULE010_2             Implicit conversion: double to int.\\
MISRA-C:2004 Rule 10.02
3815   Maj_FLtoI             Implicit conversion: double to int.\\
MISRA-C:2004 Rule 10.02

3816   RULE010_2             Implicit conversion: double to unsigned int.\\
MISRA-C:2004 Rule 10.02
3816   Maj_FLtoI             Implicit conversion: double to unsigned int.\\
MISRA-C:2004 Rule 10.02

3817   RULE010_2             Implicit conversion: double to long.\\
MISRA-C:2004 Rule 10.02
3817   Maj_FLtoI             Implicit conversion: double to long.\\
MISRA-C:2004 Rule 10.02

3818   RULE010_2             Implicit conversion: double to unsigned long.\\
MISRA-C:2004 Rule 10.02
3818   Maj_FLtoI             Implicit conversion: double to unsigned long.\\
MISRA-C:2004 Rule 10.02

3819   RULE010_2             Implicit conversion: double to float.\\
MISRA-C:2004 Rule 10.02
3819   Maj_Small             Implicit conversion: double to float.\\
MISRA-C:2004 Rule 10.02

3821   RULE010_2             Implicit conversion: long double to char.\\
MISRA-C:2004 Rule 10.02
3821   Maj_FLtoI             Implicit conversion: long double to char.\\
MISRA-C:2004 Rule 10.02

3822   RULE010_2             Implicit conversion: long double to signed char.\\
MISRA-C:2004 Rule 10.02
3822   Maj_FLtoI             Implicit conversion: long double to signed char.\\
MISRA-C:2004 Rule 10.02

3823   RULE010_2             Implicit conversion: long double to unsigned char.\\
MISRA-C:2004 Rule 10.02
3823   Maj_FLtoI             Implicit conversion: long double to unsigned char.\\
MISRA-C:2004 Rule 10.02

3824   RULE010_2             Implicit conversion: long double to short.\\
MISRA-C:2004 Rule 10.02
3824   Maj_FLtoI             Implicit conversion: long double to short.\\
MISRA-C:2004 Rule 10.02

3825   RULE010_2             Implicit conversion: long double to unsigned short .\\
MISRA-C:2004 Rule 10.02
3825   Maj_FLtoI             Implicit conversion: long double to unsigned short .\\
MISRA-C:2004 Rule 10.02

3826   RULE010_2             Implicit conversion: long double to int.\\
MISRA-C:2004 Rule 10.02
3826   Maj_FLtoI             Implicit conversion: long double to int.\\
MISRA-C:2004 Rule 10.02

3827   RULE010_2             Implicit conversion: long double to unsigned int.\\
MISRA-C:2004 Rule 10.02
3827   Maj_FLtoI             Implicit conversion: long double to unsigned int.\\
MISRA-C:2004 Rule 10.02

3828   RULE010_2             Implicit conversion: long double to long.\\
MISRA-C:2004 Rule 10.02
3828   Maj_FLtoI             Implicit conversion: long double to long.\\
MISRA-C:2004 Rule 10.02

3829   RULE010_2             Implicit conversion: long double to unsigned long.\\
MISRA-C:2004 Rule 10.02
3829   Maj_FLtoI             Implicit conversion: long double to unsigned long.\\
MISRA-C:2004 Rule 10.02

3830   RULE010_2             Implicit conversion: long double to float.\\
MISRA-C:2004 Rule 10.02
3830   Maj_Small             Implicit conversion: long double to float.\\
MISRA-C:2004 Rule 10.02

3831   RULE010_2             Implicit conversion: long double to double.\\
MISRA-C:2004 Rule 10.02
3831   Maj_Small             Implicit conversion: long double to double.\\
MISRA-C:2004 Rule 10.02

3832   RULE003_1             Implicit conversion: char to long long.\\
MISRA-C:2004 Rule 03.01
3832   Maj_Pchar             Implicit conversion: char to long long.\\
MISRA-C:2004 Rule 03.01

3833   RULE003_1             Implicit conversion: char to unsigned long long.\\
MISRA-C:2004 Rule 03.01
3833   Maj_Pchar             Implicit conversion: char to unsigned long long.\\
MISRA-C:2004 Rule 03.01

3834   RULE010_1             Implicit conversion: unsigned char to long long.\\
MISRA-C:2004 Rule 10.01
3834   Maj_UStoLS            Implicit conversion: unsigned char to long long.\\
MISRA-C:2004 Rule 10.01

3837   RULE010_1             Implicit conversion: signed char to unsigned long long.\\
MISRA-C:2004 Rule 10.01
3837   Maj_StoUS             Implicit conversion: signed char to unsigned long long.\\
MISRA-C:2004 Rule 10.01

3839   RULE010_1             Implicit conversion: short to unsigned long long.\\
MISRA-C:2004 Rule 10.01
3839   Maj_StoUS             Implicit conversion: short to unsigned long long.\\
MISRA-C:2004 Rule 10.01

3840   RULE010_1             Implicit conversion: unsigned short to long long.\\
MISRA-C:2004 Rule 10.01
3840   Maj_UStoLS            Implicit conversion: unsigned short to long long.\\
MISRA-C:2004 Rule 10.01

3843   RULE010_1             Implicit conversion: int to unsigned long long.\\
MISRA-C:2004 Rule 10.01
3843   Maj_StoUS             Implicit conversion: int to unsigned long long.\\
MISRA-C:2004 Rule 10.01

3844   RULE010_1             Implicit conversion: unsigned int to long long.\\
MISRA-C:2004 Rule 10.01
3844   Maj_UStoLS            Implicit conversion: unsigned int to long long.\\
MISRA-C:2004 Rule 10.01

3847   RULE010_1             Implicit conversion: long to unsigned long long.\\
MISRA-C:2004 Rule 10.01
3847   Maj_StoUS             Implicit conversion: long to unsigned long long.\\
MISRA-C:2004 Rule 10.01

3848   RULE010_1             Implicit conversion: unsigned long to long long.\\
MISRA-C:2004 Rule 10.01
3848   Maj_UStoLS            Implicit conversion: unsigned long to long long.\\
MISRA-C:2004 Rule 10.01

3850   RULE006_1             Implicit conversion: long long to char.\\
MISRA-C:2004 Rule 06.01
3850   Maj_Pchar             Implicit conversion: long long to char.\\
MISRA-C:2004 Rule 06.01

3851   RULE010_1             Implicit conversion: long long to signed char.\\
MISRA-C:2004 Rule 10.01
3851   Maj_Small             Implicit conversion: long long to signed char.\\
MISRA-C:2004 Rule 10.01

3852   RULE010_1             Implicit conversion: long long to unsigned char.\\
MISRA-C:2004 Rule 10.01
3852   Maj_StoUS             Implicit conversion: long long to unsigned char.\\
MISRA-C:2004 Rule 10.01

3853   RULE010_1             Implicit conversion: long long to short.\\
MISRA-C:2004 Rule 10.01
3853   Maj_Small             Implicit conversion: long long to short.\\
MISRA-C:2004 Rule 10.01

3854   RULE010_1             Implicit conversion: long long to unsigned short.\\
MISRA-C:2004 Rule 10.01
3854   Maj_StoUS             Implicit conversion: long long to unsigned short.\\
MISRA-C:2004 Rule 10.01

3855   RULE010_1             Implicit conversion: long long to int.\\
MISRA-C:2004 Rule 10.01
3855   Maj_Small             Implicit conversion: long long to int.\\
MISRA-C:2004 Rule 10.01

3856   RULE010_1             Implicit conversion: long long to unsigned int.\\
MISRA-C:2004 Rule 10.01
3856   Maj_StoUS             Implicit conversion: long long to unsigned int.\\
MISRA-C:2004 Rule 10.01

3857   RULE010_1             Implicit conversion: long long to long\\
MISRA-C:2004 Rule 10.01
3857   Maj_Small             Implicit conversion: long long to long\\
MISRA-C:2004 Rule 10.01

3858   RULE010_1             Implicit conversion: long long to unsigned long.\\
MISRA-C:2004 Rule 10.01
3858   Maj_StoUS             Implicit conversion: long long to unsigned long.\\
MISRA-C:2004 Rule 10.01

3859   RULE010_1             Implicit conversion: long long to unsigned long long.\\
MISRA-C:2004 Rule 10.01
3859   Maj_StoUS             Implicit conversion: long long to unsigned long long.\\
MISRA-C:2004 Rule 10.01

3860   RULE010_1             Implicit conversion: long long to float.\\
MISRA-C:2004 Rule 10.01
3860   Maj_ItoFL             Implicit conversion: long long to float.\\
MISRA-C:2004 Rule 10.01

3861   RULE010_1             Implicit conversion: long long to double.\\
MISRA-C:2004 Rule 10.01
3861   Maj_ItoFL             Implicit conversion: long long to double.\\
MISRA-C:2004 Rule 10.01

3862   RULE010_1             Implicit conversion: long long to long double.\\
MISRA-C:2004 Rule 10.01
3862   Maj_ItoFL             Implicit conversion: long long to long double.\\
MISRA-C:2004 Rule 10.01

3863   RULE006_1             Implicit conversion: unsigned long long to char.\\
MISRA-C:2004 Rule 06.01
3863   Maj_Pchar             Implicit conversion: unsigned long long to char.\\
MISRA-C:2004 Rule 06.01

3864   RULE010_1             Implicit conversion: unsigned long long to signed char.\\
MISRA-C:2004 Rule 10.01
3864   Maj_UStoS             Implicit conversion: unsigned long long to signed char.\\
MISRA-C:2004 Rule 10.01

3865   RULE010_1             Implicit conversion: unsigned long long to unsigned char.\\
MISRA-C:2004 Rule 10.01
3865   Maj_Small             Implicit conversion: unsigned long long to unsigned char.\\
MISRA-C:2004 Rule 10.01

3866   RULE010_1             Implicit conversion: unsigned long long to short.\\
MISRA-C:2004 Rule 10.01
3866   Maj_UStoS             Implicit conversion: unsigned long long to short.\\
MISRA-C:2004 Rule 10.01

3867   RULE010_1             Implicit conversion: unsigned long long to unsigned short.\\
MISRA-C:2004 Rule 10.01
3867   Maj_Small             Implicit conversion: unsigned long long to unsigned short.\\
MISRA-C:2004 Rule 10.01

3868   RULE010_1             Implicit conversion: unsigned long long to int.\\
MISRA-C:2004 Rule 10.01
3868   Maj_UStoS             Implicit conversion: unsigned long long to int.\\
MISRA-C:2004 Rule 10.01

3869   RULE010_1             Implicit conversion: unsigned long long to unsigned int.\\
MISRA-C:2004 Rule 10.01
3869   Maj_Small             Implicit conversion: unsigned long long to unsigned int.\\
MISRA-C:2004 Rule 10.01

3870   RULE010_1             Implicit conversion: unsigned long long to long.\\
MISRA-C:2004 Rule 10.01
3870   Maj_UStoS             Implicit conversion: unsigned long long to long.\\
MISRA-C:2004 Rule 10.01

3871   RULE010_1             Implicit conversion: unsigned long long to unsigned long.\\
MISRA-C:2004 Rule 10.01
3871   Maj_Small             Implicit conversion: unsigned long long to unsigned long.\\
MISRA-C:2004 Rule 10.01

3872   RULE010_1             Implicit conversion: unsigned long long to long long.\\
MISRA-C:2004 Rule 10.01
3872   Maj_UStoS             Implicit conversion: unsigned long long to long long.\\
MISRA-C:2004 Rule 10.01

3873   RULE010_1             Implicit conversion: unsigned long long to float.\\
MISRA-C:2004 Rule 10.01
3873   Maj_ItoFL             Implicit conversion: unsigned long long to float.\\
MISRA-C:2004 Rule 10.01

3874   RULE010_1             Implicit conversion: unsigned long long to double.\\
MISRA-C:2004 Rule 10.01
3874   Maj_ItoFL             Implicit conversion: unsigned long long to double.\\
MISRA-C:2004 Rule 10.01

3875   RULE010_1             Implicit conversion: unsigned long long to long double.\\
MISRA-C:2004 Rule 10.01
3875   Maj_ItoFL             Implicit conversion: unsigned long long to long double.\\
MISRA-C:2004 Rule 10.01

3876   RULE010_2             Implicit conversion: float to long long.\\
MISRA-C:2004 Rule 10.02
3876   Maj_FLtoI             Implicit conversion: float to long long.\\
MISRA-C:2004 Rule 10.02

3877   RULE010_2             Implicit conversion: float to unsigned long long.\\
MISRA-C:2004 Rule 10.02
3877   Maj_FLtoI             Implicit conversion: float to unsigned long long.\\
MISRA-C:2004 Rule 10.02

3878   RULE010_2             Implicit conversion: double to long long.\\
MISRA-C:2004 Rule 10.02
3878   Maj_FLtoI             Implicit conversion: double to long long.\\
MISRA-C:2004 Rule 10.02

3879   RULE010_2             Implicit conversion: double to unsigned long long.\\
MISRA-C:2004 Rule 10.02
3879   Maj_FLtoI             Implicit conversion: double to unsigned long long.\\
MISRA-C:2004 Rule 10.02

3880   RULE010_2             Implicit conversion: long double to long long.\\
MISRA-C:2004 Rule 10.02
3880   Maj_FLtoI             Implicit conversion: long double to long long.\\
MISRA-C:2004 Rule 10.02

3881   RULE010_2             Implicit conversion: long double to unsigned long long.\\
MISRA-C:2004 Rule 10.02
3881   Maj_FLtoI             Implicit conversion: long double to unsigned long long.\\
MISRA-C:2004 Rule 10.02

3900   RULE006_2             char value returned from signed char %s().\\
MISRA-C:2004 Rule 06.02
3900   Maj_Pchar             char value returned from signed char %s().\\
MISRA-C:2004 Rule 06.02

3901   RULE006_2             char value returned from unsigned char %s().\\
MISRA-C:2004 Rule 06.02
3901   Maj_Pchar             char value returned from unsigned char %s().\\
MISRA-C:2004 Rule 06.02

3902   RULE003_1             char value returned from short %s().\\
MISRA-C:2004 Rule 03.01
3902   Maj_Pchar             char value returned from short %s().\\
MISRA-C:2004 Rule 03.01

3903   RULE003_1             char value returned from unsigned short %s().\\
MISRA-C:2004 Rule 03.01
3903   Maj_Pchar             char value returned from unsigned short %s().\\
MISRA-C:2004 Rule 03.01

3904   RULE003_1             char value returned from int %s().\\
MISRA-C:2004 Rule 03.01
3904   Maj_Pchar             char value returned from int %s().\\
MISRA-C:2004 Rule 03.01

3905   RULE003_1             char value returned from unsigned int %s().\\
MISRA-C:2004 Rule 03.01
3905   Maj_Pchar             char value returned from unsigned int %s().\\
MISRA-C:2004 Rule 03.01

3906   RULE003_1             char value returned from long %s().\\
MISRA-C:2004 Rule 03.01
3906   Maj_Pchar             char value returned from long %s().\\
MISRA-C:2004 Rule 03.01

3907   RULE003_1             char value returned from unsigned long %s().\\
MISRA-C:2004 Rule 03.01
3907   Maj_Pchar             char value returned from unsigned long %s().\\
MISRA-C:2004 Rule 03.01

3908   RULE010_1             char value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3908   Maj_Pchar             char value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3909   RULE010_1             char value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3909   Maj_Pchar             char value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3910   RULE010_1             char value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3910   Maj_Pchar             char value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3911   RULE006_1             unsigned char value returned from char %s().\\
MISRA-C:2004 Rule 06.01
3911   Maj_Pchar             unsigned char value returned from char %s().\\
MISRA-C:2004 Rule 06.01

3912   RULE010_1             unsigned char value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
3912   Maj_UStoS             unsigned char value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

3913   RULE010_1             unsigned char value returned from short %s().\\
MISRA-C:2004 Rule 10.01
3913   Maj_UStoLS            unsigned char value returned from short %s().\\
MISRA-C:2004 Rule 10.01

3915   RULE010_1             unsigned char value returned from int %s().\\
MISRA-C:2004 Rule 10.01
3915   Maj_UStoLS            unsigned char value returned from int %s().\\
MISRA-C:2004 Rule 10.01

3917   RULE010_1             unsigned char value returned from long %s().\\
MISRA-C:2004 Rule 10.01
3917   Maj_UStoLS            unsigned char value returned from long %s().\\
MISRA-C:2004 Rule 10.01

3919   RULE010_1             unsigned char value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3919   Maj_ItoFL             unsigned char value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3920   RULE010_1             unsigned char value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3920   Maj_ItoFL             unsigned char value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3921   RULE010_1             unsigned char value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3921   Maj_ItoFL             unsigned char value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3922   RULE006_1             signed char value returned from char %s().\\
MISRA-C:2004 Rule 06.01
3922   Maj_Pchar             signed char value returned from char %s().\\
MISRA-C:2004 Rule 06.01

3923   RULE010_1             signed char value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
3923   Maj_StoUS             signed char value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

3925   RULE010_1             signed char value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01
3925   Maj_StoUS             signed char value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01

3927   RULE010_1             signed char value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01
3927   Maj_StoUS             signed char value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01

3929   RULE010_1             signed char value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01
3929   Maj_StoUS             signed char value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01

3930   RULE010_1             signed char value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3930   Maj_ItoFL             signed char value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3931   RULE010_1             signed char value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3931   Maj_ItoFL             signed char value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3932   RULE010_1             signed char value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3932   Maj_ItoFL             signed char value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3933   RULE006_1             short value returned from char %s().\\
MISRA-C:2004 Rule 06.01
3933   Maj_Pchar             short value returned from char %s().\\
MISRA-C:2004 Rule 06.01

3934   RULE010_1             short value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
3934   Maj_Small             short value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

3935   RULE010_1             short value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
3935   Maj_StoUS             short value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

3936   RULE010_1             short value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01
3936   Maj_StoUS             short value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01

3938   RULE010_1             short value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01
3938   Maj_StoUS             short value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01

3940   RULE010_1             short value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01
3940   Maj_StoUS             short value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01

3941   RULE010_1             short value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3941   Maj_ItoFL             short value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3942   RULE010_1             short value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3942   Maj_ItoFL             short value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3943   RULE010_1             short value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3943   Maj_ItoFL             short value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3944   RULE006_1             unsigned short value returned from char %s().\\
MISRA-C:2004 Rule 06.01
3944   Maj_Pchar             unsigned short value returned from char %s().\\
MISRA-C:2004 Rule 06.01

3945   RULE010_1             unsigned short value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
3945   Maj_UStoS             unsigned short value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

3946   RULE010_1             unsigned short value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
3946   Maj_Small             unsigned short value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

3947   RULE010_1             unsigned short value returned from short %s().\\
MISRA-C:2004 Rule 10.01
3947   Maj_UStoS             unsigned short value returned from short %s().\\
MISRA-C:2004 Rule 10.01

3948   RULE010_1             unsigned short value returned from int %s().\\
MISRA-C:2004 Rule 10.01
3948   Maj_UStoLS            unsigned short value returned from int %s().\\
MISRA-C:2004 Rule 10.01

3950   RULE010_1             unsigned short value returned from long %s().\\
MISRA-C:2004 Rule 10.01
3950   Maj_UStoLS            unsigned short value returned from long %s().\\
MISRA-C:2004 Rule 10.01

3952   RULE010_1             unsigned short value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3952   Maj_ItoFL             unsigned short value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3953   RULE010_1             unsigned short value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3953   Maj_ItoFL             unsigned short value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3954   RULE010_1             unsigned short value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3954   Maj_ItoFL             unsigned short value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3955   RULE006_1             int value returned from char %s().\\
MISRA-C:2004 Rule 06.01
3955   Maj_Pchar             int value returned from char %s().\\
MISRA-C:2004 Rule 06.01

3956   RULE010_1             int value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
3956   Maj_Small             int value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

3957   RULE010_1             int value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
3957   Maj_StoUS             int value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

3958   RULE010_1             int value returned from short %s().\\
MISRA-C:2004 Rule 10.01
3958   Maj_Small             int value returned from short %s().\\
MISRA-C:2004 Rule 10.01

3959   RULE010_1             int value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01
3959   Maj_StoUS             int value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01

3960   RULE010_1             int value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01
3960   Maj_StoUS             int value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01

3962   RULE010_1             int value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01
3962   Maj_StoUS             int value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01

3963   RULE010_1             int value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3963   Maj_ItoFL             int value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3964   RULE010_1             int value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3964   Maj_ItoFL             int value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3965   RULE010_1             int value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3965   Maj_ItoFL             int value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3966   RULE006_1             unsigned int value returned from char %s().\\
MISRA-C:2004 Rule 06.01
3966   Maj_Pchar             unsigned int value returned from char %s().\\
MISRA-C:2004 Rule 06.01

3967   RULE010_1             unsigned int value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
3967   Maj_UStoS             unsigned int value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

3968   RULE010_1             unsigned int value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
3968   Maj_Small             unsigned int value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

3969   RULE010_1             unsigned int value returned from short %s().\\
MISRA-C:2004 Rule 10.01
3969   Maj_UStoS             unsigned int value returned from short %s().\\
MISRA-C:2004 Rule 10.01

3970   RULE010_1             unsigned int value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01
3970   Maj_Small             unsigned int value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01

3971   RULE010_1             unsigned int value returned from int %s().\\
MISRA-C:2004 Rule 10.01
3971   Maj_UStoS             unsigned int value returned from int %s().\\
MISRA-C:2004 Rule 10.01

3972   RULE010_1             unsigned int value returned from long %s().\\
MISRA-C:2004 Rule 10.01
3972   Maj_UStoLS            unsigned int value returned from long %s().\\
MISRA-C:2004 Rule 10.01

3974   RULE010_1             unsigned int value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3974   Maj_ItoFL             unsigned int value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3975   RULE010_1             unsigned int value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3975   Maj_ItoFL             unsigned int value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3976   RULE010_1             unsigned int value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3976   Maj_ItoFL             unsigned int value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3977   RULE006_1             long value returned from char %s().\\
MISRA-C:2004 Rule 06.01
3977   Maj_Pchar             long value returned from char %s().\\
MISRA-C:2004 Rule 06.01

3978   RULE010_1             long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
3978   Maj_Small             long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

3979   RULE010_1             long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
3979   Maj_StoUS             long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

3980   RULE010_1             long value returned from short %s().\\
MISRA-C:2004 Rule 10.01
3980   Maj_Small             long value returned from short %s().\\
MISRA-C:2004 Rule 10.01

3981   RULE010_1             long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01
3981   Maj_StoUS             long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01

3982   RULE010_1             long value returned from int %s().\\
MISRA-C:2004 Rule 10.01
3982   Maj_Small             long value returned from int %s().\\
MISRA-C:2004 Rule 10.01

3983   RULE010_1             long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01
3983   Maj_StoUS             long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01

3984   RULE010_1             long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01
3984   Maj_StoUS             long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01

3985   RULE010_1             long value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3985   Maj_ItoFL             long value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3986   RULE010_1             long value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3986   Maj_ItoFL             long value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3987   RULE010_1             long value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3987   Maj_ItoFL             long value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3988   RULE006_1             unsigned long value returned from char %s().\\
MISRA-C:2004 Rule 06.01
3988   Maj_Pchar             unsigned long value returned from char %s().\\
MISRA-C:2004 Rule 06.01

3989   RULE010_1             unsigned long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
3989   Maj_UStoS             unsigned long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

3990   RULE010_1             unsigned long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
3990   Maj_Small             unsigned long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

3991   RULE010_1             unsigned long value returned from short %s().\\
MISRA-C:2004 Rule 10.01
3991   Maj_UStoS             unsigned long value returned from short %s().\\
MISRA-C:2004 Rule 10.01

3992   RULE010_1             unsigned long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01
3992   Maj_Small             unsigned long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01

3993   RULE010_1             unsigned long value returned from int %s().\\
MISRA-C:2004 Rule 10.01
3993   Maj_UStoS             unsigned long value returned from int %s().\\
MISRA-C:2004 Rule 10.01

3994   RULE010_1             unsigned long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01
3994   Maj_Small             unsigned long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01

3995   RULE010_1             unsigned long value returned from long %s().\\
MISRA-C:2004 Rule 10.01
3995   Maj_UStoS             unsigned long value returned from long %s().\\
MISRA-C:2004 Rule 10.01

3996   RULE010_1             unsigned long value returned from float %s().\\
MISRA-C:2004 Rule 10.01
3996   Maj_ItoFL             unsigned long value returned from float %s().\\
MISRA-C:2004 Rule 10.01

3997   RULE010_1             unsigned long value returned from double %s().\\
MISRA-C:2004 Rule 10.01
3997   Maj_ItoFL             unsigned long value returned from double %s().\\
MISRA-C:2004 Rule 10.01

3998   RULE010_1             unsigned long value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
3998   Maj_ItoFL             unsigned long value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

3999   RULE010_2             float value returned from char %s().\\
MISRA-C:2004 Rule 10.02
3999   Maj_FLtoI             float value returned from char %s().\\
MISRA-C:2004 Rule 10.02

4000   RULE010_2             float value returned from signed char %s().\\
MISRA-C:2004 Rule 10.02
4000   Maj_FLtoI             float value returned from signed char %s().\\
MISRA-C:2004 Rule 10.02

4001   RULE010_2             float value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.02
4001   Maj_FLtoI             float value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.02

4002   RULE010_2             float value returned from short %s().\\
MISRA-C:2004 Rule 10.02
4002   Maj_FLtoI             float value returned from short %s().\\
MISRA-C:2004 Rule 10.02

4003   RULE010_2             float value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.02
4003   Maj_FLtoI             float value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.02

4004   RULE010_2             float value returned from int %s().\\
MISRA-C:2004 Rule 10.02
4004   Maj_FLtoI             float value returned from int %s().\\
MISRA-C:2004 Rule 10.02

4005   RULE010_2             float value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.02
4005   Maj_FLtoI             float value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.02

4006   RULE010_2             float value returned from long %s().\\
MISRA-C:2004 Rule 10.02
4006   Maj_FLtoI             float value returned from long %s().\\
MISRA-C:2004 Rule 10.02

4007   RULE010_2             float value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.02
4007   Maj_FLtoI             float value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.02

4010   RULE010_2             double value returned from char %s().\\
MISRA-C:2004 Rule 10.02
4010   Maj_FLtoI             double value returned from char %s().\\
MISRA-C:2004 Rule 10.02

4011   RULE010_2             double value returned from signed char %s().\\
MISRA-C:2004 Rule 10.02
4011   Maj_FLtoI             double value returned from signed char %s().\\
MISRA-C:2004 Rule 10.02

4012   RULE010_2             double value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.02
4012   Maj_FLtoI             double value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.02

4013   RULE010_2             double value returned from short %s().\\
MISRA-C:2004 Rule 10.02
4013   Maj_FLtoI             double value returned from short %s().\\
MISRA-C:2004 Rule 10.02

4014   RULE010_2             double value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.02
4014   Maj_FLtoI             double value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.02

4015   RULE010_2             double value returned from int %s().\\
MISRA-C:2004 Rule 10.02
4015   Maj_FLtoI             double value returned from int %s().\\
MISRA-C:2004 Rule 10.02

4016   RULE010_2             double value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.02
4016   Maj_FLtoI             double value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.02

4017   RULE010_2             double value returned from long %s().\\
MISRA-C:2004 Rule 10.02
4017   Maj_FLtoI             double value returned from long %s().\\
MISRA-C:2004 Rule 10.02

4018   RULE010_2             double value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.02
4018   Maj_FLtoI             double value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.02

4019   RULE010_2             double value returned from float %s().\\
MISRA-C:2004 Rule 10.02
4019   Maj_Small             double value returned from float %s().\\
MISRA-C:2004 Rule 10.02

4021   RULE010_2             long double value returned from char %s().\\
MISRA-C:2004 Rule 10.02
4021   Maj_FLtoI             long double value returned from char %s().\\
MISRA-C:2004 Rule 10.02

4022   RULE010_2             long double value returned from signed char %s().\\
MISRA-C:2004 Rule 10.02
4022   Maj_FLtoI             long double value returned from signed char %s().\\
MISRA-C:2004 Rule 10.02

4023   RULE010_2             long double value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.02
4023   Maj_FLtoI             long double value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.02

4024   RULE010_2             long double value returned from short %s().\\
MISRA-C:2004 Rule 10.02
4024   Maj_FLtoI             long double value returned from short %s().\\
MISRA-C:2004 Rule 10.02

4025   RULE010_2             long double value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.02
4025   Maj_FLtoI             long double value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.02

4026   RULE010_2             long double value returned from int %s().\\
MISRA-C:2004 Rule 10.02
4026   Maj_FLtoI             long double value returned from int %s().\\
MISRA-C:2004 Rule 10.02

4027   RULE010_2             long double value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.02
4027   Maj_FLtoI             long double value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.02

4028   RULE010_2             long double value returned from long %s().\\
MISRA-C:2004 Rule 10.02
4028   Maj_FLtoI             long double value returned from long %s().\\
MISRA-C:2004 Rule 10.02

4029   RULE010_2             long double value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.02
4029   Maj_FLtoI             long double value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.02

4030   RULE010_2             long double value returned from float %s().\\
MISRA-C:2004 Rule 10.02
4030   Maj_Small             long double value returned from float %s().\\
MISRA-C:2004 Rule 10.02

4031   RULE010_2             long double value returned from double %s().\\
MISRA-C:2004 Rule 10.02
4031   Maj_Small             long double value returned from double %s().\\
MISRA-C:2004 Rule 10.02

4032   RULE003_1             char value returned from long long %s().\\
MISRA-C:2004 Rule 03.01
4032   Maj_Pchar             char value returned from long long %s().\\
MISRA-C:2004 Rule 03.01

4033   RULE003_1             char value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 03.01
4033   Maj_Pchar             char value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 03.01

4034   RULE010_1             unsigned char value returned from long long %s().\\
MISRA-C:2004 Rule 10.01
4034   Maj_UStoLS            unsigned char value returned from long long %s().\\
MISRA-C:2004 Rule 10.01

4037   RULE010_1             signed char value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01
4037   Maj_StoUS             signed char value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01

4039   RULE010_1             short value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01
4039   Maj_StoUS             short value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01

4040   RULE010_1             unsigned short value returned from long long %s().\\
MISRA-C:2004 Rule 10.01
4040   Maj_UStoLS            unsigned short value returned from long long %s().\\
MISRA-C:2004 Rule 10.01

4043   RULE010_1             int value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01
4043   Maj_StoUS             int value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01

4044   RULE010_1             unsigned int value returned from long long %s().\\
MISRA-C:2004 Rule 10.01
4044   Maj_UStoLS            unsigned int value returned from long long %s().\\
MISRA-C:2004 Rule 10.01

4047   RULE010_1             long value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01
4047   Maj_StoUS             long value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01

4048   RULE010_1             unsigned long value returned from long long %s().\\
MISRA-C:2004 Rule 10.01
4048   Maj_UStoLS            unsigned long value returned from long long %s().\\
MISRA-C:2004 Rule 10.01

4050   RULE006_1             long long value returned from char %s().\\
MISRA-C:2004 Rule 06.01
4050   Maj_Pchar             long long value returned from char %s().\\
MISRA-C:2004 Rule 06.01

4051   RULE010_1             long long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
4051   Maj_Small             long long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

4052   RULE010_1             long long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
4052   Maj_StoUS             long long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

4053   RULE010_1             long long value returned from short %s().\\
MISRA-C:2004 Rule 10.01
4053   Maj_Small             long long value returned from short %s().\\
MISRA-C:2004 Rule 10.01

4054   RULE010_1             long long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01
4054   Maj_StoUS             long long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01

4055   RULE010_1             long long value returned from int %s().\\
MISRA-C:2004 Rule 10.01
4055   Maj_Small             long long value returned from int %s().\\
MISRA-C:2004 Rule 10.01

4056   RULE010_1             long long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01
4056   Maj_StoUS             long long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01

4057   RULE010_1             long long value returned from long %s().\\
MISRA-C:2004 Rule 10.01
4057   Maj_Small             long long value returned from long %s().\\
MISRA-C:2004 Rule 10.01

4058   RULE010_1             long long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01
4058   Maj_StoUS             long long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01

4059   RULE010_1             long long value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01
4059   Maj_StoUS             long long value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.01

4060   RULE010_1             long long value returned from float %s().\\
MISRA-C:2004 Rule 10.01
4060   Maj_ItoFL             long long value returned from float %s().\\
MISRA-C:2004 Rule 10.01

4061   RULE010_1             long long value returned from double %s().\\
MISRA-C:2004 Rule 10.01
4061   Maj_ItoFL             long long value returned from double %s().\\
MISRA-C:2004 Rule 10.01

4062   RULE010_1             long long value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
4062   Maj_ItoFL             long long value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

4063   RULE006_1             unsigned long long value returned from char %s().\\
MISRA-C:2004 Rule 06.01
4063   Maj_Pchar             unsigned long long value returned from char %s().\\
MISRA-C:2004 Rule 06.01

4064   RULE010_1             unsigned long long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01
4064   Maj_UStoS             unsigned long long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.01

4065   RULE010_1             unsigned long long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01
4065   Maj_Small             unsigned long long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.01

4066   RULE010_1             unsigned long long value returned from short %s().\\
MISRA-C:2004 Rule 10.01
4066   Maj_UStoS             unsigned long long value returned from short %s().\\
MISRA-C:2004 Rule 10.01

4067   RULE010_1             unsigned long long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01
4067   Maj_Small             unsigned long long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.01

4068   RULE010_1             unsigned long long value returned from int %s().\\
MISRA-C:2004 Rule 10.01
4068   Maj_UStoS             unsigned long long value returned from int %s().\\
MISRA-C:2004 Rule 10.01

4069   RULE010_1             unsigned long long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01
4069   Maj_Small             unsigned long long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.01

4070   RULE010_1             unsigned long long value returned from long %s().\\
MISRA-C:2004 Rule 10.01
4070   Maj_UStoS             unsigned long long value returned from long %s().\\
MISRA-C:2004 Rule 10.01

4071   RULE010_1             unsigned long long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01
4071   Maj_Small             unsigned long long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.01

4072   RULE010_1             unsigned long long value returned from long long %s().\\
MISRA-C:2004 Rule 10.01
4072   Maj_UStoS             unsigned long long value returned from long long %s().\\
MISRA-C:2004 Rule 10.01

4073   RULE010_1             unsigned long long value returned from float %s().\\
MISRA-C:2004 Rule 10.01
4073   Maj_ItoFL             unsigned long long value returned from float %s().\\
MISRA-C:2004 Rule 10.01

4074   RULE010_1             unsigned long long value returned from double %s().\\
MISRA-C:2004 Rule 10.01
4074   Maj_ItoFL             unsigned long long value returned from double %s().\\
MISRA-C:2004 Rule 10.01

4075   RULE010_1             unsigned long long value returned from long double %s().\\
MISRA-C:2004 Rule 10.01
4075   Maj_ItoFL             unsigned long long value returned from long double %s().\\
MISRA-C:2004 Rule 10.01

4076   RULE010_2             float value returned from long long %s().\\
MISRA-C:2004 Rule 10.02
4076   Maj_FLtoI             float value returned from long long %s().\\
MISRA-C:2004 Rule 10.02

4077   RULE010_2             float value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.02
4077   Maj_FLtoI             float value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.02

4078   RULE010_2             double value returned from long long %s().\\
MISRA-C:2004 Rule 10.02
4078   Maj_FLtoI             double value returned from long long %s().\\
MISRA-C:2004 Rule 10.02

4079   RULE010_2             double value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.02
4079   Maj_FLtoI             double value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.02

4080   RULE010_2             long double value returned from long long %s().\\
MISRA-C:2004 Rule 10.02
4080   Maj_FLtoI             long double value returned from long long %s().\\
MISRA-C:2004 Rule 10.02

4081   RULE010_2             long double value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.02
4081   Maj_FLtoI             long double value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.02

4101   RULE012_6             Both operands of & operator are 'Boolean' expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.10 Bitwise AND Operator
4101   Maj_Ops               Both operands of & operator are 'Boolean' expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.10 Bitwise AND Operator

4102   RULE012_6             Both operands of | operator are 'Boolean' expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.12 Bitwise Inclusive OR Operator
4102   Maj_Ops               Both operands of | operator are 'Boolean' expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.12 Bitwise Inclusive OR Operator

4103   RULE012_6             Both operands of arithmetic or bitwise operator are 'Boolean' expressions.\\
MISRA-C:2004 Rule 12.06
4103   Maj_Ops               Both operands of arithmetic or bitwise operator are 'Boolean' expressions.\\
MISRA-C:2004 Rule 12.06

4104   RULE012_6             Left hand operand of arithmetic or bitwise operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06
4104   Maj_Ops               Left hand operand of arithmetic or bitwise operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06

4105   RULE012_6             Right hand operand of arithmetic or bitwise operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06
4105   Maj_Ops               Right hand operand of arithmetic or bitwise operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06

4106   RULE012_6             Both operands of && operator are arithmetic or bitwise expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.13 Logical AND Operator
4106   Maj_Ops               Both operands of && operator are arithmetic or bitwise expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.13 Logical AND Operator

4107   RULE012_6             Both operands of || operator are arithmetic or bitwise expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.14 Logical OR Operator
4107   Maj_Ops               Both operands of || operator are arithmetic or bitwise expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.14 Logical OR Operator

4108   RULE012_6             Left hand operand of logical operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.06
4108   Maj_Ops               Left hand operand of logical operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.06

4109   RULE012_6             Right hand operand of logical operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.06
4109   Maj_Ops               Right hand operand of logical operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.06

4110   RULE012_6             Operand of ! operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators
4110   Maj_Ops               Operand of ! operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators

4111   RULE012_6             Right hand operand of relational operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06
4111   Maj_Ops               Right hand operand of relational operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06

4112   RULE012_6             Left hand operand of relational operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.8 Relational Operators
4112   Maj_Ops               Left hand operand of relational operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.8 Relational Operators

4113   RULE012_6             Both operands of relational operator are 'Boolean' expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.8 Relational Operators
4113   Maj_Ops               Both operands of relational operator are 'Boolean' expressions.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.8 Relational Operators

4114   RULE012_6             Operand of ~ operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators
4114   Maj_Ops               Operand of ~ operator is a 'Boolean' expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators

4115   RULE012_6             Operand of logical && or || operator is not an 'effectively Boolean' expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.13 Logical AND Operator, ISO:C90-6.3.14 Logical OR Operator
4115   Min_Stmt              Operand of logical && or || operator is not an 'effectively Boolean' expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.13 Logical AND Operator, ISO:C90-6.3.14 Logical OR Operator

4116   RULE012_6             Operand of logical ! operator is not an 'effectively Boolean' expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators
4116   Min_Stmt              Operand of logical ! operator is not an 'effectively Boolean' expression.\\
MISRA-C:2004 Rule 12.06	REFERENCE - ISO:C90-6.3.3.3 Unary Arithmetic Operators

4120   RULE010_1             Implicit conversion: complex expression of integral type to wider type.\\
MISRA-C:2004 Rule 10.01
4120   Min_Stmt              Implicit conversion: complex expression of integral type to wider type.\\
MISRA-C:2004 Rule 10.01

4121   RULE010_3             Cast of complex expression of integral type to wider type.\\
MISRA-C:2004 Rule 10.03
4121   Min_Stmt              Cast of complex expression of integral type to wider type.\\
MISRA-C:2004 Rule 10.03

4123   RULE010_2             Implicit conversion: complex expression of type float to type double.\\
MISRA-C:2004 Rule 10.02
4123   Min_Stmt              Implicit conversion: complex expression of type float to type double.\\
MISRA-C:2004 Rule 10.02

4124   RULE010_2             Implicit conversion: complex expression of type float to type long double.\\
MISRA-C:2004 Rule 10.02
4124   Min_Stmt              Implicit conversion: complex expression of type float to type long double.\\
MISRA-C:2004 Rule 10.02

4125   RULE010_2             Implicit conversion: complex expression of type double to type long double.\\
MISRA-C:2004 Rule 10.02
4125   Min_Stmt              Implicit conversion: complex expression of type double to type long double.\\
MISRA-C:2004 Rule 10.02

4126   RULE010_4             Cast of complex expression of type float to type double.\\
MISRA-C:2004 Rule 10.04
4126   Min_Stmt              Cast of complex expression of type float to type double.\\
MISRA-C:2004 Rule 10.04

4127   RULE010_4             Cast of complex expression of type float to type long double.\\
MISRA-C:2004 Rule 10.04
4127   Min_Stmt              Cast of complex expression of type float to type long double.\\
MISRA-C:2004 Rule 10.04

4128   RULE010_4             Cast of complex expression of type double to type long double.\\
MISRA-C:2004 Rule 10.04
4128   Min_Stmt              Cast of complex expression of type double to type long double.\\
MISRA-C:2004 Rule 10.04

4130   RULE012_7             Bitwise operations on signed data will give implementation defined results.\\
MISRA-C:2004 Rule 12.07	REFERENCE - ISO:C90-6.3 Expressions
4130   Maj_Ops               Bitwise operations on signed data will give implementation defined results.\\
MISRA-C:2004 Rule 12.07	REFERENCE - ISO:C90-6.3 Expressions

4131   RULE012_7             Left shift operation on signed operand.\\
MISRA-C:2004 Rule 12.07
4131   Min_Ops               Left shift operation on signed operand.\\
MISRA-C:2004 Rule 12.07

4140   RULE017_6             Address of automatic object exported in function return value.\\
MISRA-C:2004 Rule 17.06	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects
4140   Maj_Ops               Address of automatic object exported in function return value.\\
MISRA-C:2004 Rule 17.06	REFERENCE - ISO:C90-6.1.2.4 Storage Durations of Objects

4600   RULE020_1             The macro '%1s' is also defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4600   Min_Ident             The macro '%1s' is also defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

4601   RULE020_1             The macro '%1s' is the name of an identifier in '<%2s>'.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4601   Min_Ident             The macro '%1s' is the name of an identifier in '<%2s>'.\\
MISRA-C:2004 Rule 20.01	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

4602   RULE020_2             The identifier '%1s' is declared as a macro in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4602   Min_Ident             The identifier '%1s' is declared as a macro in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

4603   RULE020_2             The object/function '%1s'is being defined with the same name as an ordinary identifier defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4603   Min_Ident             The object/function '%1s'is being defined with the same name as an ordinary identifier defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

4604   RULE020_2             The object/function '%1s' is being declared with the same name as an ordinary identifier defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4604   Min_Ident             The object/function '%1s' is being declared with the same name as an ordinary identifier defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

4605   RULE020_2             The typedef '%1s' is also defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4605   Min_Ident             The typedef '%1s' is also defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

4606   RULE020_2             The typedef '%1s' has the same name as another ordinary identifier in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4606   Min_Ident             The typedef '%1s' has the same name as another ordinary identifier in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

4607   RULE020_2             The enum constant '%1s' has the same name as another ordinary identifier in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4607   Min_Ident             The enum constant '%1s' has the same name as another ordinary identifier in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

4608   RULE020_2             The tag '%1s' is also defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers
4608   Min_Ident             The tag '%1s' is also defined in '<%2s>'.\\
MISRA-C:2004 Rule 20.02	REFERENCE - ISO:C90-7.1.2.1 Reserved Identifiers, ISO:C99-7.1.3 Reserved Identifiers

5013   RULE006_3             Use of basic type '%s'.\\
MISRA-C:2004 Rule 06.03

5069   RULE016_1             Functions shall not be defined with a variable number of arguments.\\
MISRA-C:2004 Rule 16.01

5087   RULE019_1             #include statements in a file should only be preceded by other preprocessor directives or comments.\\
MISRA-C:2004 Rule 19.01

5102   RULE017_5             The declaration of objects should contain no more than 2 levels of pointer indirection.\\
MISRA-C:2004 Rule 17.05

5118   RULE020_4             Dynamic heap memory allocation shall not be used.\\
MISRA-C:2004 Rule 20.04

5119   RULE020_5             The error indicator errno shall not be used.\\
MISRA-C:2004 Rule 20.05

5120   RULE020_6             The macro offsetof, in library <stddef.h>, shall not be used.\\
MISRA-C:2004 Rule 20.06

5122   RULE020_7             The setjmp macro and the longjmp function shall not be used.\\
MISRA-C:2004 Rule 20.07

5123   RULE020_8             The signal handling facilities of <signal.h> shall not be used.\\
MISRA-C:2004 Rule 20.08

5124   RULE020_9             The input/output library <stdio.h> shall not be used in production code.\\
MISRA-C:2004 Rule 20.09

5125   RULE20_10             The library functions atof, atoi and atol from library <stdlib.h> shall not be used.\\
MISRA-C:2004 Rule 20.10

5126   RULE20_11             The library functions abort, exit, getenv and system from library <stdlib.h> shall not be used.\\
MISRA-C:2004 Rule 20.11

5127   RULE20_12             The time handling functions of library <time.h> shall not be used.\\
MISRA-C:2004 Rule 20.12

#levelname                         1     LK_CHECK
#define    LK_MESSAGES             1     MESSAGE_OFF - ON Unpaarigkeit

6000   LK_MESSAGES           Die Message %s wurde nicht wieder aktiviert.\\
LK_Check
6001   LK_MESSAGES           Die Message %s wurde nicht wieder deaktiviert.\\
LK_Check

6100   LK_METRICS   HIS measure: Comment density (>20%) (%s%)\\
HIS source code metric STCDN
6110   LK_METRICS   HIS measure: Count of non-cyclic  execution paths (1-80) (%s)\\
HIS source code metric STPTH
6120   LK_METRICS   HIS measure: Usage of GOTO statement (0) (%s)\\
HIS source code metric STGTO
6130   LK_METRICS   HIS measure: Cyclomatic complexity (1-10) (%s)\\
HIS source code metric STCYC
6170   LK_METRICS   HIS measure: Number of statements in function (variant 3)  (1-50) (%s)\\
HIS source code metric STST3
6175   LK_METRICS   HIS measure: Nesting of control structures (0-4) (%s)\\
HIS source code metric STMIF
6180   LK_METRICS   HIS measure: Exit points (0-1) (%s)\\
HIS source code metric STM19
6185   LK_METRICS   HIS measure: Function parameters (0-5) (%s)\\
HIS source code metric STPAR
6190   LK_METRICS   HIS measure: Distinct function calls (0-7) (%s)\\
HIS source code metric STCAL

****************************************************************************************************************
* 				    LEOPOLD KOSTAL GUIDELINE MESSAGES		                	       *
****************************************************************************************************************
6111   RULE6111              Syntactic structure of the identifier is incorrect.\\
KOSTAL-C:2006 Rule 0.0

6112   RULE6112              The data type could not be found in the chapter "Datentypen QAC".\\
KOSTAL-C:2006 Rule 7.2

6113   RULE6113              No rule could be found for this type.\\
KOSTAL-C:2006 Rule 0.0

6200   RULE6200              The module prefix '%s' of the function is not allowed.\\
KOSTAL-C:2006 Rule 5.4

6201   RULE6201              The return value '%s' of the function is not allowed.\\
KOSTAL-C:2006 Rule 5.4

6202   RULE6202              The name '%s' of the function is not allowed.\\
KOSTAL-C:2006 Rule 5.4/5.0

6203   RULE6203              The module prefix '%s' of the function is not allowed.\\
KOSTAL-C:2006 Rule 5.4

6204   RULE6204              The return value '%s' of the function is not allowed.\\
KOSTAL-C:2006 Rule 5.4

6205   RULE6205              The name '%s' of the function is not allowed.\\
KOSTAL-C:2006 Rule 5.4/5.0

6300   RULE6300              The typedef name '%s' is not allowed.\\
KOSTAL-C:2006 Rule 5.5/5.0

6301   RULE6301              The typedef name '%s' is not allowed.\\
KOSTAL-C:2006 Rule 5.5/5.0

6310   RULE6310              The typedef module prefix '%s' is not allowed.\\
KOSTAL-C:2006 Rule 5.5

6400   RULE6400              The name '%s' of the enumeration constant is not allowed.\\
KOSTAL-C:2006 Rule 5.6/5.0

6405   RULE6405              The module prefix '%s' of the enumeration constant is not allowed.\\
KOSTAL-C:2006 Rule 5.6

6500   RULE6500              The module prefix '%s' of the global variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7

6502   RULE6502              The name '%s' of the global variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6506   RULE6506              The name '%s' of the local variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6509   RULE6509              The name '%s' of the global static variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6512   RULE6512              The name '%s' of the local static variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6514   RULE6514              The name '%s' of the function parameter variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6516   RULE6516              The name '%s' of the function parameter variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6517   RULE6517              The module prefix '%s' of the member variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7

6519   RULE6519              The name '%s' of the member variable is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6550   RULE6550              The module prefix '%s' of the global 1D array is not allowed.\\
KOSTAL-C:2006 Rule 5.7

6552   RULE6552              The name '%s' of the global 1D Array is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6556   RULE6556              The name '%s' of the local 1D array is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6559   RULE6559              The name '%s' of the global static 1D array is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0

6600   RULE6600              The name '%s' of the define object is not allowed.\\
KOSTAL-C:2006 Rule 6.1/5.0

6601   RULE6601              The module prefix '%s' of the define macro is not allowed.\\
KOSTAL-C:2006 Rule 6.1

6602   RULE6602              The name '%s' of the define macro is not allowed.\\
KOSTAL-C:2006 Rule 6.1/5.0

6603   RULE6603              The module prefix '%s' of the define object is not allowed.\\
KOSTAL-C:2006 Rule 6.1

6605   RULE6605               The name '%s' of the local static 1D array is not allowed.\\
KOSTAL-C:2006 Rule 5.7/5.0
