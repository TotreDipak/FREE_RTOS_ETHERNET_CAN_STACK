

#ifndef MCU_INTERNALTYPES_H
#define MCU_INTERNALTYPES_H

#include "Std_Types.h"

   /*Reset Value*/

#define   RCC_AHB1RSTR_SET             ((uint32)0x226011FF)
#define   RCC_AHB1RSTR_RESET            ((uint32)0x00000000)

#define   RCC_AHB2RSTR_SET              ((uint32)0x000000F1)
#define   RCC_AHB2RSTR_RESET            ((uint32)0x00000000)


#define   RCC_AHB3RSTR_SET              ((uint32)0x00000001)
#define   RCC_AHB3RSTR_RESET            ((uint32)0x00000000)


#define   RCC_APB1RSTR_SET            ((uint32)0x32FEC1FF)
#define   RCC_APB1RSTR_RESET            ((uint32)0x00000000)

#define   RCC_APB2RSTR_SET            ((uint32)0x0007593)
#define   RCC_APB2RSTR_RESET          ((uint32)0x00000000)

#define   RCC_CFGR_RESET            ((uint32)0x00000000)
#define   RCC_PLLCFGR_RESET         ((uint32)0x00000000)

typedef enum
{
	MCU_PLL_STATUS_UNDEFINED,
	MCU_PLL_LOCKED,
	MCU_PLL_UNLOCKED,
	MCU_PLL_OFF
} Mcu_PllStatusType;

/*Clock Control Register*/
typedef enum
{
	PLLI2S_OFF =0x00000000,
	PLLI2S_ON  =0x04000000
}RCC_CrPLLI2SType;

typedef enum
{  PLL_OFF =0x00000000,
   PLL_ON  = 0x01000000
}RCC_CrPLLType;

typedef enum
{  CSS_OFF= 0x00000000,
   CSS_ON=  0x00080000
}RCC_CrCSSType;

typedef enum
{ HSEBYP_OFF =0x00000000,
  HSEBYP_ON  =0x00040000
}RCC_CrHSEBYPType;


typedef enum
{ HSE_OFF =0x00000000,
  HSE_ON  =0x00010000
}RCC_CrHSEType;


typedef enum
{
 HSITRIM = 0x00000000,
 HSITRIM_DEFAULT = 0x00000080
}RCC_CrHSITRIMType;


typedef enum
{ HSION_OFF=0x00000000,
  HSION_ON=0x00000001
}RCC_CrHSIType;



/*PLLCFGR Register*/

typedef enum
{
	PLLM_3 =0x00000008
}RCC_CFgrPLLMType;

typedef enum
{
	PLLN_336 =0x00005400
}RCC_CFgrPLLNType;


typedef enum
{
	 PLLP_2 =0x00000000
}RCC_CFgrPLLPType;


typedef enum
{
PLLSRC_HSE = 0x00400000
}RCC_CFgrPLLSRCType;


typedef enum
{
PLLQ_4 =0x04000000
}RCC_CFgrPLLQType;




typedef enum
{   PRE2_AHB_2 =0x00008000,
	PRE2_AHB_4 =0x0000A000,
	PRE2_AHB_8 =0x0000C000,
	PRE2_AHB_16 =0x0000E000
}RCC_CfgrPre2_AHBType;

typedef enum
{   PRE1_AHB_2 =0x00001000,
	PRE1_AHB_4  =0x00001400,
	PRE1_AHB_8   =0x00001400,
	PRE1_AHB_16  =0x00001C00
}RCC_CfgrPre1_AHBType;

typedef enum
{
	HRPE_SYSCLK_1    =0x00000000,
	HRPE_SYSCLK_2    =0x00000080,
	HRPE_SYSCLK_4    =0x00000090,
	HRPE_SYSCLK_8    =0x000000A0,
	HRPE_SYSCLK_16   =0x000000B0,
	HRPE_SYSCLK_64   =0x000000C0,
	HRPE_SYSCLK_128  =0x000000D0,
	HRPE_SYSCLK_256  =0x000000E0,
	HRPE_SYSCLK_512  =0x000000F0
}RCC_CfgrHRPEType;


typedef enum
{
	SW_HSIOSCILLATOR =0x00000000,
	SW_HSEOSCILLATOR =0x00000001,
	SW_PLL           =0x00000002,
	SW_NOT_ALLOWED   =0x00000003
}RCC_CfgrSwType;

typedef enum
{
MCO2_SYSCLK  =0x00000000,
MCO2_PLLI2S  =0x40000000,
MCO2_HSE     =0x80000000,
MCO2_PLL   	 =0xC0000000
}RCC_CfgrMco2Type;

typedef enum
{
MCO2PRE_2 =0x20000000,
MCO2PRE_3  =0x28000000,
MCO2PRE_4 =0x30000000,
MCO2PRE_5  =0x38000000

}RCC_CfgrMCO2PREType;

typedef enum
{
MCO1PRE_2 =0x04000000,
MCO1PRE_3 =0x05000000,
MCO1PRE_4 =0x06000000,
MCO1PRE_5 =0x07000000

}RCC_CfgrMCO1PREType;

typedef enum
{
I2SSRC_PLL    =0x00000000,
I2SSRC_EXTCLK =0x00800000

}RCC_CfgrI2SSRCType;



typedef enum
{
MCO1_HSE           =0x00000000,
MCO1_LSE           =0x00200000,
MCO1_HSEOSCILLATER =0x00400000,
MCO1_PLL           =0x00600000

}RCC_CfgrMCO1Type;

typedef enum
{
RTC_PREHSE_1  =0x00000000,
RTC_PREHSE_2  =0x00020000,
RTC_PREHSE_3  =0x00030000,
RTC_PREHSE_4  =0x00040000,
RTC_PREHSE_30 =0x001E0000,
RTC_PREHSE_31 =0x001F0000
}RCC_CfgrRTCPREType;


/*RCC_CIR register*/
typedef enum
{
PLLI2SRDYIELI_DISABLED =0x00000000,
PLLI2SRDYIELI_ENABLED  =0x00002000
}RCC_CIR_PLLI2SRDYIEType;

typedef enum
{
PLLRDYIELI_DISABLED =0x00000000,
PLLRDYIELI_ENABLED  =0x00001000
}RCC_CIR_PLLRDYIELIType;

typedef enum
{
	HSERDYIEI_DISABLED =0x00000000,
	HSERDYIEI_ENABLED  =0x00000800
}RCC_CIR_HSERDYIEIType;

typedef enum
{
HSIRDYIEI_DISABLED =0x00000000,
HSIRDYIEI_ENABLED  =0x00000400
}RCC_CIR_HSIRDYIEIType;

typedef enum
{
LSERDYIEI_DISABLED =0x00000000,
LSERDYIEI_ENABLED  =0x00000200
}RCC_CIR_LSERDYIEIType;

typedef enum
{
LSIRDYIEI_DISABLED =0x00000000,
LSIRDYIEI_ENABLED  =0x00000100
}RCC_CIR_LSIRDYIEIType;


/*McuAHB1ENRConfgVal*/


typedef enum
{
OTGHSULPIEN_DISABLED =0x00000000,
OTGHSULPIEN_ENABLED  =0x40010000
}RCC_AHB1OTGHSULPIENType;

typedef enum
{
	OTGHSEN_DISABLED =0x00000000,
	OTGHSEN_ENABLED  =0x40010000
}RCC_AHB1OTGHSENType;

typedef enum
{
ETHMACPTPEN_DISABLED=0x00000000,
ETHMACPTPEN_ENABLED =0x10000000
}RCC_AHB1ETHMACPTPENType;

typedef enum
{
ETHMACRXEN_DISABLED =0x00000000,
ETHMACRXEN_ENABLED  =0x08000000
}RCC_AHB1ETHMACRXENType;

typedef enum
{
ETHMACTXEN_DISABLED =0x00000000,
ETHMACTXEN_ENABLED  =0x04000000
}RCC_AHB1ETHMACTXENType;

typedef enum
{
ETHMACEN_DISABLED =0x00000000,
ETHMACEN_ENABLED  =0x02000000
}RCC_AHB1ETHMACENType;

typedef enum
{
DMA2EN_DISABLED =0x00000000,
DMA2EN_ENABLED  =0x00400000
}RCC_AHB1DMA2ENType;


typedef enum
{
DMA1EN_DISABLED=0x00000000,
DMA1EN_ENABLED=0x00200000
}RCC_AHB1DMA1ENType;

typedef enum
{
CCMDATARAMEN_DISABLED =0x00000000,
CCMDATARAMEN_ENABLED  =0x00100000
}RCC_AHB1CCMDATARAMENType;

typedef enum
{
BKPSRAMEN_DISABLED  =0x00000000,
BKPSRAMEN_ENABLED   =0x00040000
}RCC_AHB1BKPSRAMENType;

typedef enum
{
CRCEN_DISABLED =0x00000000,
CRCEN_ENABLED  =0x00001000
}RCC_AHB1CRCENType;

typedef enum
{
GPIOIEN_DISABLED =0x00000000,
GPIOIEN_ENABLED  =0x00000100
}RCC_AHB1GPIOIENType;

typedef enum
{
GPIOHEN_DISABLED =0x00000000,
GPIOHEN_ENABLED  =0x00000080
}RCC_AHB1GPIOHENType;

typedef enum
{
GPIOGEN_DISABLED  =0x00000000,
GPIOGEN_ENABLED   =0x00000040
}RCC_AHB1GPIOGENType;

typedef enum
{
GPIOFEN_DISABLED =0x00000000,
GPIOFEN_ENABLED  =0x00000020
}RCC_AHB1GPIOFENType;

typedef enum
{GPIOEEN_DISABLED  =0x00000000,GPIOEEN_ENABLED   =0x00000010
}RCC_AHB1GPIOEENType;


typedef enum
{
GPIODEN_DISABLED =0x00000000,
GPIODEN_ENABLED  =0x00000008
}RCC_AHB1GPIODENType;

typedef enum
{
GPIOCEN_DISABLED =0x00000000,
GPIOCEN_ENABLED  =0x00000004
}RCC_AHB1GPIOCENType;

typedef enum
{
GPIOBEN_DISABLED =0x00000000,
GPIOBEN_ENABLED  =0x00000002

}RCC_AHB1GPIOBENType;

typedef enum
{
GPIOAEN_DISABLED =0x00000000,
GPIOAEN_ENABLED  =0x00000001
}RCC_AHB1GPIOAENType;


/*McuAHB2ENRConfgVal*/

typedef enum
{
OTGFSEN_DISABLED =0x00000000,
OTGFSEN_ENABLED  =0x00000080

}RCC_AHB2OTGFSType;

typedef enum
{
RNGEN_DISABLED   =0x00000000,
RNGEN_ENABLED    =0x00000040

}RCC_AHB2RNGENType;


typedef enum
{
HASHEN_DISABLED  =0x00000000,
HASHEN_ENABLED   =0x00000020
}RCC_AHB2HASHType;

typedef enum
{
CRYPEN_DISABLED  =0x00000000,
CRYPEN_ENABLED   =0x00000010

}RCC_AHB2CRYPENType;

typedef enum
{
DCMIEN_DISABLED =0x00000000,
DCMIEN_ENABLED  =0x00000001
}RCC_AHB2DCMIENType;



/*McuAHB3ENRConfgVal*/

typedef enum
{
FSMCEN_DISABLED =0x00000000,
FSMCEN_ENABLED  =0x00000001
}RCC_AHB3FSMCType;


/*McuAPB1ENRConfgVal*/


typedef enum
{
DACEN_DISABLED =0x00000000,
DACEN_ENABLED  =0x20000000
}RCC_APB1DACENType;


typedef enum
{
PWREN_DISABLED =0x00000000,
PWREN_ENABLED  =0x10000000
}RCC_APB1PWRENType;

typedef enum
{
CAN2EN_DISABLED =0x00000000,
CAN2EN_ENABLED  =0x04000000
}RCC_APB1CAN2ENType;

typedef enum
{
CAN1EN_DISABLED =0x00000000,
CAN1EN_ENABLED  =0x02000000
}RCC_APB1CAN1ENType;

typedef enum
{
I2C3EN_DISABLED=0x00000000,
I2C3EN_ENABLED =0x00800000
}RCC_APB1I2C3ENType;


typedef enum
{
I2C2EN_DISABLED =0x00000000,
I2C2EN_ENABLED  =0x00400000
}RCC_APB1I2C2ENType;


typedef enum
{
I2C1EN_DISABLED =0x00000000,
I2C1EN_ENABLED  =0x00200000
}RCC_APB1I2C1ENType;

typedef enum
{
UART5EN_DISABLED =0x00000000,
UART5EN_ENABLED  =0x00100000
}RCC_APB1UART5ENType;

typedef enum
{
UART4EN_DISABLED =0x00000000,
UART4EN_ENABLED  =0x00080000
}RCC_APB1UART4ENType;

typedef enum
{
USART3EN_DISABLED =0x00000000,
USART3EN_ENABLED  =0x00040000
}RCC_APB1USART3ENType;

typedef enum
{
USART2EN_DISABLED =0x00000000,
USART2EN_ENABLED  =0x00020000
}RCC_APB1USART2ENType;

typedef enum
{
SPI3EN_DISABLED =0x00000000,
SPI3EN_ENABLED  =0x00008000
}RCC_APB1SPI3ENType;


typedef enum
{
SPI2EN_DISABLED =0x00000000,
SPI2EN_ENABLED  =0x00004000
}RCC_APB1SPI2ENType;

typedef enum
{
WWDGEN_DISABLED =0x00000000,
WWDGEN_ENABLED  =0x0000080
}RCC_APB1WWDGENType;

typedef enum
{
TIM14EN_DISABLED =0x00000000,
TIM14EN_ENABLED  =0x00000100
}RCC_APB1TIM14ENType;

typedef enum
{
TIM13EN_DISABLED =0x00000000,
TIM13EN_ENABLED  =0x00000080
}RCC_APB1TIM13ENType;


typedef enum
{
TIM12EN_DISABLED =0x00000000,
TIM12EN_ENABLED  =0x00000040
}RCC_APB1TIM12ENType;

typedef enum
{
TIM7EN_DISABLED =0x00000000,
TIM7EN_ENABLED  =0x00000020
}RCC_APB1TIM7ENType;


typedef enum
{
TIM6EN_DISABLED =0x00000000,
TIM6EN_ENABLED  =0x00000010
}RCC_APB1TIM6ENType;

typedef enum
{
TIM5EN_DISABLED=0x00000000,
TIM5EN_ENABLED =0x00000008
}RCC_APB1TIM5ENType;

typedef enum
{
TIM4EN_DISABLED =0x00000000,
TIM4EN_ENABLED  =0x00000004
}RCC_APB1TIM4ENType;

typedef enum
{
TIM3EN_DISABLED =0x00000000,
TIM3EN_ENABLED  =0x00000002
}RCC_APB1TIM3ENType;

typedef enum
{
TIM2EN_DISABLED =0x00000000,
TIM2EN_ENABLED  =0x00000001
}RCC_APB1TIM2ENType;



/*McuAPB2ENRConfgVal*/

typedef enum
{
TIM11EN_DISABLED =0x00000000,
TIM11EN_ENABLED  =0x00020000
}RCC_APB2TIM11ENType;

typedef enum
{
TIM10EN_DISABLED =0x00000000,
TIM10EN_ENABLED  =0x00008000
}RCC_APB2TIM10ENType;

typedef enum
{
TIM9EN_DISABLED =0x00000000,
TIM9EN_ENABLED  =0x00004000
}RCC_APB2TIM9ENType;


typedef enum
{
SYSCFGEN_DISABLED =0x00000000,
SYSCFGEN_ENABLED  =0x00004000
}RCC_APB2SYSCFGENType;


typedef enum
{
SPI1EN_DISABLED =0x00000000,
SPI1EN_ENABLED  =0x00000100
}RCC_APB2SPI1ENType;

typedef enum
{
SDIOEN_DISABLED =0x00000000,
SDIOEN_ENABLED  =0x00000080
}RCC_APB2SDIOENType;


typedef enum
{
ADC3EN_DISABLED =0x00000000,
ADC3EN_ENABLED  =0x00000040
}RCC_APB2ADC3ENType;



typedef enum
{
ADC2EN_DISABLED =0x00000000,
ADC2EN_ENABLED  =0x00000020
}RCC_APB2ADC2ENType;

typedef enum
{

ADC1EN_DISABLED =0x00000000,
ADC1EN_ENABLED  =0x00000010
}RCC_APB2ADC1ENType;

typedef enum
{
USART6EN_DISABLED =0x00000000,
USART6EN_ENABLED  =0x00000008
}RCC_APB2USART6ENType;

typedef enum
{
USART1EN_DISABLED =0x00000000,
USART1EN_ENABLED  =0x00000004
}RCC_APB2USART1ENType;


typedef enum
{
TIM8EN_DISABLED=0x00000000,
TIM8EN_ENABLED =0x00000002
}RCC_APB2TIM8ENType;


typedef enum
{
TIM1EN_DISABLED=0x00000000,
TIM1EN_ENABLED =0x00000001
}RCC_APB2TIM1ENType;






/*RCC_BDCR register*/
typedef enum
{BDRST_RESET_NOTACTIVATED  = 0x00000000,
BDRST_RESET_ENTIRE_DOMAIN  = 0x00010000
}RCC_BDCRBDType;

typedef enum
{RTCEN_CLOCK_DISABLED =0x00000000,
RTCEN_CLOCK_ENABLED  =0x00008000
}RCC_BDCRTCENType;

typedef enum
{
RTCSEL_NO  =0x00000000,
RTCSEL_LSE =0x00000100,
RTCSEL_LSI =0x00000200,
RTCSEL_HSI =0x00000300
}RCC_BDCRRTCSELType;

typedef enum
{LSEBYP_NOT_BYPASSED =0x00000000,
LSEBYP_BYPASSED      =0x00000004
}RCC_BDCRLSEBYPType;

typedef enum
{    LSEON_OFF =0x00000000,
      LSE_ON    =0x00000001
}RCC_BDCRLSEType;



/*RCC_CSR register*/

typedef enum
{ LSION_OFF =0x00000000,
  LSION_ON  =0x00000001
}RCC_CSRLSIType;

/*RCC_SSCGR register*/


typedef enum
{
SSCGEN_DISABLE =0x00000000,
SSCGEN_ENABLE  =0x40000000
}RCC_SSCGRSSCGENType;

typedef enum
{
SPREADSEL_CENTRE  =0x00000000,
SPREADSEL_DOWN    =0x80000000
}RCC_SSCGRSPREADSEType;


typedef enum
{
  PLLI2SR2 =0x00000000
}RCC_PLLI2SCFGRPLLI2SR2Type;


typedef enum
{
	PLLI2SR1 =0x20000000
}RCC_PLLI2SCFGRPLLI2SR1Type;

typedef enum
{
	PLLI2SR0 =0x70000000
}RCC_PLLI2SCFGRPLLI2SR0Type;


typedef enum
{
	PLLI2SN0 =0x00000000
}RCC_PLLI2SCFGRPLLI2SN0Type;
typedef enum
{
  PLLI2SN1 =0x70000000
}RCC_PLLI2SCFGRPLLI2SN1Type;
typedef enum
{
  PLLI2SN2 =0x70000000
}RCC_PLLI2SCFGRPLLI2SN2Type;
typedef enum
{
  PLLI2SN3 =0x70000000
}RCC_PLLI2SCFGRPLLI2SN3Type;
typedef enum
{
  PLLI2SN4 =0x70000000
}RCC_PLLI2SCFGRPLLI2SN4Type;
typedef enum
{
  PLLI2SN5 =0x70000000
}RCC_PLLI2SCFGRPLLI2SN5Type;
typedef enum
{
  PLLI2SN6 =0x70000000
}RCC_PLLI2SCFGRPLLI2SN6Type;
typedef enum
{
  PLLI2SN7 =0x70000000
}RCC_PLLI2SCFGRPLLI2SN7Type;
typedef enum
{
  PLLI2SN8 =0x70000000
}RCC_PLLI2SCFGRPLLI2SN8Type;


/*PwrCRConfgVal*/
typedef enum
{
VOS_SCALE_2 =0x00000000,
VOS_SCALE_1 =0x00004000
}PwrCRVOSType;

typedef enum
{
FPDS_NOT_POWER_DOWN =0x00000000,
FPDS_POWER_DOWN     =0x00000200
}PwrCRFPDSType;

typedef enum
{
DBP_DISABLED =0x00000000,
DBP_ENABLED  =0x00000100
}PwrCRDBPType;

typedef enum
{
PLS20V  =0x00000000,
PLS21V  =0x00000020,
PLS23V  =0x00000040,
PLS25V  =0x00000060,
PLS26V  =0x00000080,
PLS27V  =0x000000A0,
PLS28V  =0x000000C0,
PLS29V  =0x000000E0
}PwrCRPLSType;


typedef enum
{
PVDE_DISABLED =0x00000000,
PVDE_ENABLED  =0x00000010
}PwrCRPVDEType;

typedef enum
{
PDDS_STOP_MODE    =0x00000000,
PDDS_STANDBY_MODE =0x00000002
}PwrCRPDDSType;



typedef enum
{
LPDS_STOP_MODE         =0x00000000,
LPDS_LOWPOWER_STOP_MOD =0x00000001
}PwrCRLPDSType;

/*PwrCSRType*/

typedef enum
{
BRE_DISABLED =0x00000000,
BRE_ENABLED  =0x00000200
}PwrCSRBREType;

typedef enum
{
EWUP_NOT_WAKEUP=0x00000000,
EWUP_WAKEUP    =0x00000100
}PwrCSREWUPType;




/*FLASH_ACR register*/

typedef enum
{
DCRST_NOT_RESET=0x00000000,
DCRST_RESET    =0x00001000
}FLASHACRDCRSTType;

typedef enum
{
ICRST_NOT_RESET =0x00000000,
ICRST_RESET     =0x00000800
}FLASHACRICRSTType;

typedef enum
{
DCEN_DISABLED =0x00000000,
DCEN_ENABLED  =0x00000400
}FLASHACRDCENType;


typedef enum
{

ICEN_DISABLED =0x00000000,
ICEN_ENABLED  =0x00000200
}FLASHACRICENType;


typedef enum
{

PRFTEN_DISABLED =0x00000000,
PRFTEN_ENABLED  =0x00000100
}FLASHACRPRFTENType;


typedef enum
{


LATENCY_ZERO_STATE  =0x00000000,
LATENCY_ONE_STATE   =0x00000000,
LATENCY_TWO_STATE   =0x00000000,
LATENCY_THREE_STATE =0x00000000,
LATENCY_FOUR_STATE  =0x00000000,
LATENCY_FIVE_STATE  =0x00000005,
LATENCY_SIX_STATE   =0x00000000,
LATENCY_SEVEN_STATE =0x00000000
}FLASHACRLATENCYType;

#endif





